
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Relationship
 * 
 */
export type Relationship = $Result.DefaultSelection<Prisma.$RelationshipPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Likepost
 * 
 */
export type Likepost = $Result.DefaultSelection<Prisma.$LikepostPayload>
/**
 * Model Likecomment
 * 
 */
export type Likecomment = $Result.DefaultSelection<Prisma.$LikecommentPayload>
/**
 * Model Likemessage
 * 
 */
export type Likemessage = $Result.DefaultSelection<Prisma.$LikemessagePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.relationship`: Exposes CRUD operations for the **Relationship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relationships
    * const relationships = await prisma.relationship.findMany()
    * ```
    */
  get relationship(): Prisma.RelationshipDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.likepost`: Exposes CRUD operations for the **Likepost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likeposts
    * const likeposts = await prisma.likepost.findMany()
    * ```
    */
  get likepost(): Prisma.LikepostDelegate<ExtArgs>;

  /**
   * `prisma.likecomment`: Exposes CRUD operations for the **Likecomment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likecomments
    * const likecomments = await prisma.likecomment.findMany()
    * ```
    */
  get likecomment(): Prisma.LikecommentDelegate<ExtArgs>;

  /**
   * `prisma.likemessage`: Exposes CRUD operations for the **Likemessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likemessages
    * const likemessages = await prisma.likemessage.findMany()
    * ```
    */
  get likemessage(): Prisma.LikemessageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Relationship: 'Relationship',
    Post: 'Post',
    Comment: 'Comment',
    Message: 'Message',
    Likepost: 'Likepost',
    Likecomment: 'Likecomment',
    Likemessage: 'Likemessage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "relationship" | "post" | "comment" | "message" | "likepost" | "likecomment" | "likemessage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Relationship: {
        payload: Prisma.$RelationshipPayload<ExtArgs>
        fields: Prisma.RelationshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelationshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelationshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          findFirst: {
            args: Prisma.RelationshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelationshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          findMany: {
            args: Prisma.RelationshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>[]
          }
          create: {
            args: Prisma.RelationshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          createMany: {
            args: Prisma.RelationshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RelationshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>[]
          }
          delete: {
            args: Prisma.RelationshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          update: {
            args: Prisma.RelationshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          deleteMany: {
            args: Prisma.RelationshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelationshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RelationshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          aggregate: {
            args: Prisma.RelationshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelationship>
          }
          groupBy: {
            args: Prisma.RelationshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelationshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelationshipCountArgs<ExtArgs>
            result: $Utils.Optional<RelationshipCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Likepost: {
        payload: Prisma.$LikepostPayload<ExtArgs>
        fields: Prisma.LikepostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikepostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikepostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>
          }
          findFirst: {
            args: Prisma.LikepostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikepostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>
          }
          findMany: {
            args: Prisma.LikepostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>[]
          }
          create: {
            args: Prisma.LikepostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>
          }
          createMany: {
            args: Prisma.LikepostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikepostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>[]
          }
          delete: {
            args: Prisma.LikepostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>
          }
          update: {
            args: Prisma.LikepostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>
          }
          deleteMany: {
            args: Prisma.LikepostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikepostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikepostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikepostPayload>
          }
          aggregate: {
            args: Prisma.LikepostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikepost>
          }
          groupBy: {
            args: Prisma.LikepostGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikepostGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikepostCountArgs<ExtArgs>
            result: $Utils.Optional<LikepostCountAggregateOutputType> | number
          }
        }
      }
      Likecomment: {
        payload: Prisma.$LikecommentPayload<ExtArgs>
        fields: Prisma.LikecommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikecommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikecommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>
          }
          findFirst: {
            args: Prisma.LikecommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikecommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>
          }
          findMany: {
            args: Prisma.LikecommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>[]
          }
          create: {
            args: Prisma.LikecommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>
          }
          createMany: {
            args: Prisma.LikecommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikecommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>[]
          }
          delete: {
            args: Prisma.LikecommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>
          }
          update: {
            args: Prisma.LikecommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>
          }
          deleteMany: {
            args: Prisma.LikecommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikecommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikecommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikecommentPayload>
          }
          aggregate: {
            args: Prisma.LikecommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikecomment>
          }
          groupBy: {
            args: Prisma.LikecommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikecommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikecommentCountArgs<ExtArgs>
            result: $Utils.Optional<LikecommentCountAggregateOutputType> | number
          }
        }
      }
      Likemessage: {
        payload: Prisma.$LikemessagePayload<ExtArgs>
        fields: Prisma.LikemessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikemessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikemessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>
          }
          findFirst: {
            args: Prisma.LikemessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikemessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>
          }
          findMany: {
            args: Prisma.LikemessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>[]
          }
          create: {
            args: Prisma.LikemessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>
          }
          createMany: {
            args: Prisma.LikemessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikemessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>[]
          }
          delete: {
            args: Prisma.LikemessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>
          }
          update: {
            args: Prisma.LikemessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>
          }
          deleteMany: {
            args: Prisma.LikemessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikemessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LikemessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikemessagePayload>
          }
          aggregate: {
            args: Prisma.LikemessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikemessage>
          }
          groupBy: {
            args: Prisma.LikemessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikemessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikemessageCountArgs<ExtArgs>
            result: $Utils.Optional<LikemessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    posts: number
    profilePosts: number
    comments: number
    user1: number
    user2: number
    requestingUser: number
    sender: number
    receiver: number
    postLikes: number
    commentLikes: number
    messageLikes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    profilePosts?: boolean | UserCountOutputTypeCountProfilePostsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    user1?: boolean | UserCountOutputTypeCountUser1Args
    user2?: boolean | UserCountOutputTypeCountUser2Args
    requestingUser?: boolean | UserCountOutputTypeCountRequestingUserArgs
    sender?: boolean | UserCountOutputTypeCountSenderArgs
    receiver?: boolean | UserCountOutputTypeCountReceiverArgs
    postLikes?: boolean | UserCountOutputTypeCountPostLikesArgs
    commentLikes?: boolean | UserCountOutputTypeCountCommentLikesArgs
    messageLikes?: boolean | UserCountOutputTypeCountMessageLikesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfilePostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestingUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSenderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikepostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikecommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikemessageWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    comments: number
    likes: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | PostCountOutputTypeCountCommentsArgs
    likes?: boolean | PostCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikepostWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    likes: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | CommentCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikecommentWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    likes: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | MessageCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikemessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    username: string | null
    email: string | null
    password: string | null
    profileInfo: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    username: string | null
    email: string | null
    password: string | null
    profileInfo: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    dateCreated: number
    username: number
    email: number
    password: number
    profileInfo: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    dateCreated?: true
    username?: true
    email?: true
    password?: true
    profileInfo?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    username?: true
    email?: true
    password?: true
    profileInfo?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    dateCreated?: true
    username?: true
    email?: true
    password?: true
    profileInfo?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    dateCreated: Date
    username: string
    email: string
    password: string
    profileInfo: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    profileInfo?: boolean
    posts?: boolean | User$postsArgs<ExtArgs>
    profilePosts?: boolean | User$profilePostsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    user1?: boolean | User$user1Args<ExtArgs>
    user2?: boolean | User$user2Args<ExtArgs>
    requestingUser?: boolean | User$requestingUserArgs<ExtArgs>
    sender?: boolean | User$senderArgs<ExtArgs>
    receiver?: boolean | User$receiverArgs<ExtArgs>
    postLikes?: boolean | User$postLikesArgs<ExtArgs>
    commentLikes?: boolean | User$commentLikesArgs<ExtArgs>
    messageLikes?: boolean | User$messageLikesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    profileInfo?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    dateCreated?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    profileInfo?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | User$postsArgs<ExtArgs>
    profilePosts?: boolean | User$profilePostsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    user1?: boolean | User$user1Args<ExtArgs>
    user2?: boolean | User$user2Args<ExtArgs>
    requestingUser?: boolean | User$requestingUserArgs<ExtArgs>
    sender?: boolean | User$senderArgs<ExtArgs>
    receiver?: boolean | User$receiverArgs<ExtArgs>
    postLikes?: boolean | User$postLikesArgs<ExtArgs>
    commentLikes?: boolean | User$commentLikesArgs<ExtArgs>
    messageLikes?: boolean | User$messageLikesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      posts: Prisma.$PostPayload<ExtArgs>[]
      profilePosts: Prisma.$PostPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      user1: Prisma.$RelationshipPayload<ExtArgs>[]
      user2: Prisma.$RelationshipPayload<ExtArgs>[]
      requestingUser: Prisma.$RelationshipPayload<ExtArgs>[]
      sender: Prisma.$MessagePayload<ExtArgs>[]
      receiver: Prisma.$MessagePayload<ExtArgs>[]
      postLikes: Prisma.$LikepostPayload<ExtArgs>[]
      commentLikes: Prisma.$LikecommentPayload<ExtArgs>[]
      messageLikes: Prisma.$LikemessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateCreated: Date
      username: string
      email: string
      password: string
      profileInfo: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    profilePosts<T extends User$profilePostsArgs<ExtArgs> = {}>(args?: Subset<T, User$profilePostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    user1<T extends User$user1Args<ExtArgs> = {}>(args?: Subset<T, User$user1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany"> | Null>
    user2<T extends User$user2Args<ExtArgs> = {}>(args?: Subset<T, User$user2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany"> | Null>
    requestingUser<T extends User$requestingUserArgs<ExtArgs> = {}>(args?: Subset<T, User$requestingUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany"> | Null>
    sender<T extends User$senderArgs<ExtArgs> = {}>(args?: Subset<T, User$senderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    receiver<T extends User$receiverArgs<ExtArgs> = {}>(args?: Subset<T, User$receiverArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    postLikes<T extends User$postLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$postLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findMany"> | Null>
    commentLikes<T extends User$commentLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$commentLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findMany"> | Null>
    messageLikes<T extends User$messageLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$messageLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly dateCreated: FieldRef<"User", 'DateTime'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly profileInfo: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.profilePosts
   */
  export type User$profilePostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.user1
   */
  export type User$user1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    cursor?: RelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * User.user2
   */
  export type User$user2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    cursor?: RelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * User.requestingUser
   */
  export type User$requestingUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    cursor?: RelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * User.sender
   */
  export type User$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.receiver
   */
  export type User$receiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.postLikes
   */
  export type User$postLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    where?: LikepostWhereInput
    orderBy?: LikepostOrderByWithRelationInput | LikepostOrderByWithRelationInput[]
    cursor?: LikepostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikepostScalarFieldEnum | LikepostScalarFieldEnum[]
  }

  /**
   * User.commentLikes
   */
  export type User$commentLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    where?: LikecommentWhereInput
    orderBy?: LikecommentOrderByWithRelationInput | LikecommentOrderByWithRelationInput[]
    cursor?: LikecommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikecommentScalarFieldEnum | LikecommentScalarFieldEnum[]
  }

  /**
   * User.messageLikes
   */
  export type User$messageLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    where?: LikemessageWhereInput
    orderBy?: LikemessageOrderByWithRelationInput | LikemessageOrderByWithRelationInput[]
    cursor?: LikemessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikemessageScalarFieldEnum | LikemessageScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Relationship
   */

  export type AggregateRelationship = {
    _count: RelationshipCountAggregateOutputType | null
    _avg: RelationshipAvgAggregateOutputType | null
    _sum: RelationshipSumAggregateOutputType | null
    _min: RelationshipMinAggregateOutputType | null
    _max: RelationshipMaxAggregateOutputType | null
  }

  export type RelationshipAvgAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
    requestingUserId: number | null
  }

  export type RelationshipSumAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
    requestingUserId: number | null
  }

  export type RelationshipMinAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
    requestingUserId: number | null
    pending: boolean | null
    accepted: boolean | null
    blockeduser1: boolean | null
    blockeduser2: boolean | null
  }

  export type RelationshipMaxAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
    requestingUserId: number | null
    pending: boolean | null
    accepted: boolean | null
    blockeduser1: boolean | null
    blockeduser2: boolean | null
  }

  export type RelationshipCountAggregateOutputType = {
    id: number
    user1Id: number
    user2Id: number
    requestingUserId: number
    pending: number
    accepted: number
    blockeduser1: number
    blockeduser2: number
    _all: number
  }


  export type RelationshipAvgAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    requestingUserId?: true
  }

  export type RelationshipSumAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    requestingUserId?: true
  }

  export type RelationshipMinAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    requestingUserId?: true
    pending?: true
    accepted?: true
    blockeduser1?: true
    blockeduser2?: true
  }

  export type RelationshipMaxAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    requestingUserId?: true
    pending?: true
    accepted?: true
    blockeduser1?: true
    blockeduser2?: true
  }

  export type RelationshipCountAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    requestingUserId?: true
    pending?: true
    accepted?: true
    blockeduser1?: true
    blockeduser2?: true
    _all?: true
  }

  export type RelationshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relationship to aggregate.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Relationships
    **/
    _count?: true | RelationshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelationshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelationshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationshipMaxAggregateInputType
  }

  export type GetRelationshipAggregateType<T extends RelationshipAggregateArgs> = {
        [P in keyof T & keyof AggregateRelationship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelationship[P]>
      : GetScalarType<T[P], AggregateRelationship[P]>
  }




  export type RelationshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithAggregationInput | RelationshipOrderByWithAggregationInput[]
    by: RelationshipScalarFieldEnum[] | RelationshipScalarFieldEnum
    having?: RelationshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationshipCountAggregateInputType | true
    _avg?: RelationshipAvgAggregateInputType
    _sum?: RelationshipSumAggregateInputType
    _min?: RelationshipMinAggregateInputType
    _max?: RelationshipMaxAggregateInputType
  }

  export type RelationshipGroupByOutputType = {
    id: number
    user1Id: number
    user2Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1: boolean | null
    blockeduser2: boolean | null
    _count: RelationshipCountAggregateOutputType | null
    _avg: RelationshipAvgAggregateOutputType | null
    _sum: RelationshipSumAggregateOutputType | null
    _min: RelationshipMinAggregateOutputType | null
    _max: RelationshipMaxAggregateOutputType | null
  }

  type GetRelationshipGroupByPayload<T extends RelationshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelationshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationshipGroupByOutputType[P]>
            : GetScalarType<T[P], RelationshipGroupByOutputType[P]>
        }
      >
    >


  export type RelationshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    requestingUserId?: boolean
    pending?: boolean
    accepted?: boolean
    blockeduser1?: boolean
    blockeduser2?: boolean
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | UserDefaultArgs<ExtArgs>
    requestingUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relationship"]>

  export type RelationshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    requestingUserId?: boolean
    pending?: boolean
    accepted?: boolean
    blockeduser1?: boolean
    blockeduser2?: boolean
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | UserDefaultArgs<ExtArgs>
    requestingUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relationship"]>

  export type RelationshipSelectScalar = {
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    requestingUserId?: boolean
    pending?: boolean
    accepted?: boolean
    blockeduser1?: boolean
    blockeduser2?: boolean
  }

  export type RelationshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | UserDefaultArgs<ExtArgs>
    requestingUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RelationshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | UserDefaultArgs<ExtArgs>
    requestingUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RelationshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Relationship"
    objects: {
      user1: Prisma.$UserPayload<ExtArgs>
      user2: Prisma.$UserPayload<ExtArgs>
      requestingUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user1Id: number
      user2Id: number
      requestingUserId: number
      pending: boolean
      accepted: boolean
      blockeduser1: boolean | null
      blockeduser2: boolean | null
    }, ExtArgs["result"]["relationship"]>
    composites: {}
  }

  type RelationshipGetPayload<S extends boolean | null | undefined | RelationshipDefaultArgs> = $Result.GetResult<Prisma.$RelationshipPayload, S>

  type RelationshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RelationshipFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RelationshipCountAggregateInputType | true
    }

  export interface RelationshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Relationship'], meta: { name: 'Relationship' } }
    /**
     * Find zero or one Relationship that matches the filter.
     * @param {RelationshipFindUniqueArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelationshipFindUniqueArgs>(args: SelectSubset<T, RelationshipFindUniqueArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Relationship that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RelationshipFindUniqueOrThrowArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelationshipFindUniqueOrThrowArgs>(args: SelectSubset<T, RelationshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Relationship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipFindFirstArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelationshipFindFirstArgs>(args?: SelectSubset<T, RelationshipFindFirstArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Relationship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipFindFirstOrThrowArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelationshipFindFirstOrThrowArgs>(args?: SelectSubset<T, RelationshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Relationships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relationships
     * const relationships = await prisma.relationship.findMany()
     * 
     * // Get first 10 Relationships
     * const relationships = await prisma.relationship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relationshipWithIdOnly = await prisma.relationship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelationshipFindManyArgs>(args?: SelectSubset<T, RelationshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Relationship.
     * @param {RelationshipCreateArgs} args - Arguments to create a Relationship.
     * @example
     * // Create one Relationship
     * const Relationship = await prisma.relationship.create({
     *   data: {
     *     // ... data to create a Relationship
     *   }
     * })
     * 
     */
    create<T extends RelationshipCreateArgs>(args: SelectSubset<T, RelationshipCreateArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Relationships.
     * @param {RelationshipCreateManyArgs} args - Arguments to create many Relationships.
     * @example
     * // Create many Relationships
     * const relationship = await prisma.relationship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelationshipCreateManyArgs>(args?: SelectSubset<T, RelationshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Relationships and returns the data saved in the database.
     * @param {RelationshipCreateManyAndReturnArgs} args - Arguments to create many Relationships.
     * @example
     * // Create many Relationships
     * const relationship = await prisma.relationship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Relationships and only return the `id`
     * const relationshipWithIdOnly = await prisma.relationship.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RelationshipCreateManyAndReturnArgs>(args?: SelectSubset<T, RelationshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Relationship.
     * @param {RelationshipDeleteArgs} args - Arguments to delete one Relationship.
     * @example
     * // Delete one Relationship
     * const Relationship = await prisma.relationship.delete({
     *   where: {
     *     // ... filter to delete one Relationship
     *   }
     * })
     * 
     */
    delete<T extends RelationshipDeleteArgs>(args: SelectSubset<T, RelationshipDeleteArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Relationship.
     * @param {RelationshipUpdateArgs} args - Arguments to update one Relationship.
     * @example
     * // Update one Relationship
     * const relationship = await prisma.relationship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelationshipUpdateArgs>(args: SelectSubset<T, RelationshipUpdateArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Relationships.
     * @param {RelationshipDeleteManyArgs} args - Arguments to filter Relationships to delete.
     * @example
     * // Delete a few Relationships
     * const { count } = await prisma.relationship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelationshipDeleteManyArgs>(args?: SelectSubset<T, RelationshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relationships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relationships
     * const relationship = await prisma.relationship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelationshipUpdateManyArgs>(args: SelectSubset<T, RelationshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Relationship.
     * @param {RelationshipUpsertArgs} args - Arguments to update or create a Relationship.
     * @example
     * // Update or create a Relationship
     * const relationship = await prisma.relationship.upsert({
     *   create: {
     *     // ... data to create a Relationship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Relationship we want to update
     *   }
     * })
     */
    upsert<T extends RelationshipUpsertArgs>(args: SelectSubset<T, RelationshipUpsertArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Relationships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipCountArgs} args - Arguments to filter Relationships to count.
     * @example
     * // Count the number of Relationships
     * const count = await prisma.relationship.count({
     *   where: {
     *     // ... the filter for the Relationships we want to count
     *   }
     * })
    **/
    count<T extends RelationshipCountArgs>(
      args?: Subset<T, RelationshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Relationship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationshipAggregateArgs>(args: Subset<T, RelationshipAggregateArgs>): Prisma.PrismaPromise<GetRelationshipAggregateType<T>>

    /**
     * Group by Relationship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationshipGroupByArgs['orderBy'] }
        : { orderBy?: RelationshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Relationship model
   */
  readonly fields: RelationshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Relationship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelationshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user1<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user2<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    requestingUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Relationship model
   */ 
  interface RelationshipFieldRefs {
    readonly id: FieldRef<"Relationship", 'Int'>
    readonly user1Id: FieldRef<"Relationship", 'Int'>
    readonly user2Id: FieldRef<"Relationship", 'Int'>
    readonly requestingUserId: FieldRef<"Relationship", 'Int'>
    readonly pending: FieldRef<"Relationship", 'Boolean'>
    readonly accepted: FieldRef<"Relationship", 'Boolean'>
    readonly blockeduser1: FieldRef<"Relationship", 'Boolean'>
    readonly blockeduser2: FieldRef<"Relationship", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Relationship findUnique
   */
  export type RelationshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship findUniqueOrThrow
   */
  export type RelationshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship findFirst
   */
  export type RelationshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relationships.
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relationships.
     */
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * Relationship findFirstOrThrow
   */
  export type RelationshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relationships.
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relationships.
     */
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * Relationship findMany
   */
  export type RelationshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationships to fetch.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Relationships.
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * Relationship create
   */
  export type RelationshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Relationship.
     */
    data: XOR<RelationshipCreateInput, RelationshipUncheckedCreateInput>
  }

  /**
   * Relationship createMany
   */
  export type RelationshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Relationships.
     */
    data: RelationshipCreateManyInput | RelationshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Relationship createManyAndReturn
   */
  export type RelationshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Relationships.
     */
    data: RelationshipCreateManyInput | RelationshipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Relationship update
   */
  export type RelationshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Relationship.
     */
    data: XOR<RelationshipUpdateInput, RelationshipUncheckedUpdateInput>
    /**
     * Choose, which Relationship to update.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship updateMany
   */
  export type RelationshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Relationships.
     */
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyInput>
    /**
     * Filter which Relationships to update
     */
    where?: RelationshipWhereInput
  }

  /**
   * Relationship upsert
   */
  export type RelationshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Relationship to update in case it exists.
     */
    where: RelationshipWhereUniqueInput
    /**
     * In case the Relationship found by the `where` argument doesn't exist, create a new Relationship with this data.
     */
    create: XOR<RelationshipCreateInput, RelationshipUncheckedCreateInput>
    /**
     * In case the Relationship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelationshipUpdateInput, RelationshipUncheckedUpdateInput>
  }

  /**
   * Relationship delete
   */
  export type RelationshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter which Relationship to delete.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship deleteMany
   */
  export type RelationshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relationships to delete
     */
    where?: RelationshipWhereInput
  }

  /**
   * Relationship without action
   */
  export type RelationshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    pageOwnerId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    pageOwnerId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    title: string | null
    content: string | null
    ownerId: number | null
    pageOwnerId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    title: string | null
    content: string | null
    ownerId: number | null
    pageOwnerId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    dateCreated: number
    title: number
    content: number
    ownerId: number
    pageOwnerId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    ownerId?: true
    pageOwnerId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    ownerId?: true
    pageOwnerId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    dateCreated?: true
    title?: true
    content?: true
    ownerId?: true
    pageOwnerId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    title?: true
    content?: true
    ownerId?: true
    pageOwnerId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    dateCreated?: true
    title?: true
    content?: true
    ownerId?: true
    pageOwnerId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: number
    dateCreated: Date
    title: string
    content: string
    ownerId: number
    pageOwnerId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    title?: boolean
    content?: boolean
    ownerId?: boolean
    pageOwnerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    pageOwner?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    title?: boolean
    content?: boolean
    ownerId?: boolean
    pageOwnerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    pageOwner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    dateCreated?: boolean
    title?: boolean
    content?: boolean
    ownerId?: boolean
    pageOwnerId?: boolean
  }

  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    pageOwner?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    pageOwner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      pageOwner: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikepostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateCreated: Date
      title: string
      content: string
      ownerId: number
      pageOwnerId: number
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    pageOwner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Post$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    likes<T extends Post$likesArgs<ExtArgs> = {}>(args?: Subset<T, Post$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly dateCreated: FieldRef<"Post", 'DateTime'>
    readonly title: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly ownerId: FieldRef<"Post", 'Int'>
    readonly pageOwnerId: FieldRef<"Post", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post.comments
   */
  export type Post$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    where?: LikepostWhereInput
    orderBy?: LikepostOrderByWithRelationInput | LikepostOrderByWithRelationInput[]
    cursor?: LikepostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikepostScalarFieldEnum | LikepostScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    ownerId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    postId: number | null
    ownerId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    content: string | null
    postId: number | null
    ownerId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    content: string | null
    postId: number | null
    ownerId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    dateCreated: number
    content: number
    postId: number
    ownerId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    postId?: true
    ownerId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    postId?: true
    ownerId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    postId?: true
    ownerId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    postId?: true
    ownerId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    postId?: true
    ownerId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    dateCreated: Date
    content: string
    postId: number
    ownerId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    postId?: boolean
    ownerId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    likes?: boolean | Comment$likesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    postId?: boolean
    ownerId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    postId?: boolean
    ownerId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    likes?: boolean | Comment$likesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      owner: Prisma.$UserPayload<ExtArgs>
      likes: Prisma.$LikecommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateCreated: Date
      content: string
      postId: number
      ownerId: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    likes<T extends Comment$likesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly dateCreated: FieldRef<"Comment", 'DateTime'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly postId: FieldRef<"Comment", 'Int'>
    readonly ownerId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.likes
   */
  export type Comment$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    where?: LikecommentWhereInput
    orderBy?: LikecommentOrderByWithRelationInput | LikecommentOrderByWithRelationInput[]
    cursor?: LikecommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikecommentScalarFieldEnum | LikecommentScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    content: string | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    dateCreated: Date | null
    content: string | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    dateCreated: number
    content: number
    senderId: number
    receiverId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    dateCreated?: true
    content?: true
    senderId?: true
    receiverId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    dateCreated: Date
    content: string
    senderId: number
    receiverId: number
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    senderId?: boolean
    receiverId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    likes?: boolean | Message$likesArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    senderId?: boolean
    receiverId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    dateCreated?: boolean
    content?: boolean
    senderId?: boolean
    receiverId?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    likes?: boolean | Message$likesArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
      likes: Prisma.$LikemessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateCreated: Date
      content: string
      senderId: number
      receiverId: number
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    likes<T extends Message$likesArgs<ExtArgs> = {}>(args?: Subset<T, Message$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly dateCreated: FieldRef<"Message", 'DateTime'>
    readonly content: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'Int'>
    readonly receiverId: FieldRef<"Message", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.likes
   */
  export type Message$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    where?: LikemessageWhereInput
    orderBy?: LikemessageOrderByWithRelationInput | LikemessageOrderByWithRelationInput[]
    cursor?: LikemessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikemessageScalarFieldEnum | LikemessageScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Likepost
   */

  export type AggregateLikepost = {
    _count: LikepostCountAggregateOutputType | null
    _avg: LikepostAvgAggregateOutputType | null
    _sum: LikepostSumAggregateOutputType | null
    _min: LikepostMinAggregateOutputType | null
    _max: LikepostMaxAggregateOutputType | null
  }

  export type LikepostAvgAggregateOutputType = {
    id: number | null
    likerId: number | null
    postId: number | null
  }

  export type LikepostSumAggregateOutputType = {
    id: number | null
    likerId: number | null
    postId: number | null
  }

  export type LikepostMinAggregateOutputType = {
    id: number | null
    likerId: number | null
    postId: number | null
  }

  export type LikepostMaxAggregateOutputType = {
    id: number | null
    likerId: number | null
    postId: number | null
  }

  export type LikepostCountAggregateOutputType = {
    id: number
    likerId: number
    postId: number
    _all: number
  }


  export type LikepostAvgAggregateInputType = {
    id?: true
    likerId?: true
    postId?: true
  }

  export type LikepostSumAggregateInputType = {
    id?: true
    likerId?: true
    postId?: true
  }

  export type LikepostMinAggregateInputType = {
    id?: true
    likerId?: true
    postId?: true
  }

  export type LikepostMaxAggregateInputType = {
    id?: true
    likerId?: true
    postId?: true
  }

  export type LikepostCountAggregateInputType = {
    id?: true
    likerId?: true
    postId?: true
    _all?: true
  }

  export type LikepostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likepost to aggregate.
     */
    where?: LikepostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeposts to fetch.
     */
    orderBy?: LikepostOrderByWithRelationInput | LikepostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikepostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeposts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeposts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likeposts
    **/
    _count?: true | LikepostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikepostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikepostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikepostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikepostMaxAggregateInputType
  }

  export type GetLikepostAggregateType<T extends LikepostAggregateArgs> = {
        [P in keyof T & keyof AggregateLikepost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikepost[P]>
      : GetScalarType<T[P], AggregateLikepost[P]>
  }




  export type LikepostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikepostWhereInput
    orderBy?: LikepostOrderByWithAggregationInput | LikepostOrderByWithAggregationInput[]
    by: LikepostScalarFieldEnum[] | LikepostScalarFieldEnum
    having?: LikepostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikepostCountAggregateInputType | true
    _avg?: LikepostAvgAggregateInputType
    _sum?: LikepostSumAggregateInputType
    _min?: LikepostMinAggregateInputType
    _max?: LikepostMaxAggregateInputType
  }

  export type LikepostGroupByOutputType = {
    id: number
    likerId: number
    postId: number
    _count: LikepostCountAggregateOutputType | null
    _avg: LikepostAvgAggregateOutputType | null
    _sum: LikepostSumAggregateOutputType | null
    _min: LikepostMinAggregateOutputType | null
    _max: LikepostMaxAggregateOutputType | null
  }

  type GetLikepostGroupByPayload<T extends LikepostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikepostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikepostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikepostGroupByOutputType[P]>
            : GetScalarType<T[P], LikepostGroupByOutputType[P]>
        }
      >
    >


  export type LikepostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likerId?: boolean
    postId?: boolean
    liker?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likepost"]>

  export type LikepostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likerId?: boolean
    postId?: boolean
    liker?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likepost"]>

  export type LikepostSelectScalar = {
    id?: boolean
    likerId?: boolean
    postId?: boolean
  }

  export type LikepostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    liker?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type LikepostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    liker?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $LikepostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Likepost"
    objects: {
      liker: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      likerId: number
      postId: number
    }, ExtArgs["result"]["likepost"]>
    composites: {}
  }

  type LikepostGetPayload<S extends boolean | null | undefined | LikepostDefaultArgs> = $Result.GetResult<Prisma.$LikepostPayload, S>

  type LikepostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikepostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikepostCountAggregateInputType | true
    }

  export interface LikepostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Likepost'], meta: { name: 'Likepost' } }
    /**
     * Find zero or one Likepost that matches the filter.
     * @param {LikepostFindUniqueArgs} args - Arguments to find a Likepost
     * @example
     * // Get one Likepost
     * const likepost = await prisma.likepost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikepostFindUniqueArgs>(args: SelectSubset<T, LikepostFindUniqueArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Likepost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikepostFindUniqueOrThrowArgs} args - Arguments to find a Likepost
     * @example
     * // Get one Likepost
     * const likepost = await prisma.likepost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikepostFindUniqueOrThrowArgs>(args: SelectSubset<T, LikepostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Likepost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostFindFirstArgs} args - Arguments to find a Likepost
     * @example
     * // Get one Likepost
     * const likepost = await prisma.likepost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikepostFindFirstArgs>(args?: SelectSubset<T, LikepostFindFirstArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Likepost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostFindFirstOrThrowArgs} args - Arguments to find a Likepost
     * @example
     * // Get one Likepost
     * const likepost = await prisma.likepost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikepostFindFirstOrThrowArgs>(args?: SelectSubset<T, LikepostFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likeposts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likeposts
     * const likeposts = await prisma.likepost.findMany()
     * 
     * // Get first 10 Likeposts
     * const likeposts = await prisma.likepost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likepostWithIdOnly = await prisma.likepost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikepostFindManyArgs>(args?: SelectSubset<T, LikepostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Likepost.
     * @param {LikepostCreateArgs} args - Arguments to create a Likepost.
     * @example
     * // Create one Likepost
     * const Likepost = await prisma.likepost.create({
     *   data: {
     *     // ... data to create a Likepost
     *   }
     * })
     * 
     */
    create<T extends LikepostCreateArgs>(args: SelectSubset<T, LikepostCreateArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likeposts.
     * @param {LikepostCreateManyArgs} args - Arguments to create many Likeposts.
     * @example
     * // Create many Likeposts
     * const likepost = await prisma.likepost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikepostCreateManyArgs>(args?: SelectSubset<T, LikepostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likeposts and returns the data saved in the database.
     * @param {LikepostCreateManyAndReturnArgs} args - Arguments to create many Likeposts.
     * @example
     * // Create many Likeposts
     * const likepost = await prisma.likepost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likeposts and only return the `id`
     * const likepostWithIdOnly = await prisma.likepost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikepostCreateManyAndReturnArgs>(args?: SelectSubset<T, LikepostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Likepost.
     * @param {LikepostDeleteArgs} args - Arguments to delete one Likepost.
     * @example
     * // Delete one Likepost
     * const Likepost = await prisma.likepost.delete({
     *   where: {
     *     // ... filter to delete one Likepost
     *   }
     * })
     * 
     */
    delete<T extends LikepostDeleteArgs>(args: SelectSubset<T, LikepostDeleteArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Likepost.
     * @param {LikepostUpdateArgs} args - Arguments to update one Likepost.
     * @example
     * // Update one Likepost
     * const likepost = await prisma.likepost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikepostUpdateArgs>(args: SelectSubset<T, LikepostUpdateArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likeposts.
     * @param {LikepostDeleteManyArgs} args - Arguments to filter Likeposts to delete.
     * @example
     * // Delete a few Likeposts
     * const { count } = await prisma.likepost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikepostDeleteManyArgs>(args?: SelectSubset<T, LikepostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likeposts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likeposts
     * const likepost = await prisma.likepost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikepostUpdateManyArgs>(args: SelectSubset<T, LikepostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Likepost.
     * @param {LikepostUpsertArgs} args - Arguments to update or create a Likepost.
     * @example
     * // Update or create a Likepost
     * const likepost = await prisma.likepost.upsert({
     *   create: {
     *     // ... data to create a Likepost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Likepost we want to update
     *   }
     * })
     */
    upsert<T extends LikepostUpsertArgs>(args: SelectSubset<T, LikepostUpsertArgs<ExtArgs>>): Prisma__LikepostClient<$Result.GetResult<Prisma.$LikepostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likeposts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostCountArgs} args - Arguments to filter Likeposts to count.
     * @example
     * // Count the number of Likeposts
     * const count = await prisma.likepost.count({
     *   where: {
     *     // ... the filter for the Likeposts we want to count
     *   }
     * })
    **/
    count<T extends LikepostCountArgs>(
      args?: Subset<T, LikepostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikepostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Likepost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikepostAggregateArgs>(args: Subset<T, LikepostAggregateArgs>): Prisma.PrismaPromise<GetLikepostAggregateType<T>>

    /**
     * Group by Likepost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikepostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikepostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikepostGroupByArgs['orderBy'] }
        : { orderBy?: LikepostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikepostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikepostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Likepost model
   */
  readonly fields: LikepostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Likepost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikepostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    liker<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Likepost model
   */ 
  interface LikepostFieldRefs {
    readonly id: FieldRef<"Likepost", 'Int'>
    readonly likerId: FieldRef<"Likepost", 'Int'>
    readonly postId: FieldRef<"Likepost", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Likepost findUnique
   */
  export type LikepostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * Filter, which Likepost to fetch.
     */
    where: LikepostWhereUniqueInput
  }

  /**
   * Likepost findUniqueOrThrow
   */
  export type LikepostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * Filter, which Likepost to fetch.
     */
    where: LikepostWhereUniqueInput
  }

  /**
   * Likepost findFirst
   */
  export type LikepostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * Filter, which Likepost to fetch.
     */
    where?: LikepostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeposts to fetch.
     */
    orderBy?: LikepostOrderByWithRelationInput | LikepostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likeposts.
     */
    cursor?: LikepostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeposts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeposts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likeposts.
     */
    distinct?: LikepostScalarFieldEnum | LikepostScalarFieldEnum[]
  }

  /**
   * Likepost findFirstOrThrow
   */
  export type LikepostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * Filter, which Likepost to fetch.
     */
    where?: LikepostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeposts to fetch.
     */
    orderBy?: LikepostOrderByWithRelationInput | LikepostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likeposts.
     */
    cursor?: LikepostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeposts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeposts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likeposts.
     */
    distinct?: LikepostScalarFieldEnum | LikepostScalarFieldEnum[]
  }

  /**
   * Likepost findMany
   */
  export type LikepostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * Filter, which Likeposts to fetch.
     */
    where?: LikepostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeposts to fetch.
     */
    orderBy?: LikepostOrderByWithRelationInput | LikepostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likeposts.
     */
    cursor?: LikepostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeposts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeposts.
     */
    skip?: number
    distinct?: LikepostScalarFieldEnum | LikepostScalarFieldEnum[]
  }

  /**
   * Likepost create
   */
  export type LikepostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * The data needed to create a Likepost.
     */
    data: XOR<LikepostCreateInput, LikepostUncheckedCreateInput>
  }

  /**
   * Likepost createMany
   */
  export type LikepostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likeposts.
     */
    data: LikepostCreateManyInput | LikepostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Likepost createManyAndReturn
   */
  export type LikepostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Likeposts.
     */
    data: LikepostCreateManyInput | LikepostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Likepost update
   */
  export type LikepostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * The data needed to update a Likepost.
     */
    data: XOR<LikepostUpdateInput, LikepostUncheckedUpdateInput>
    /**
     * Choose, which Likepost to update.
     */
    where: LikepostWhereUniqueInput
  }

  /**
   * Likepost updateMany
   */
  export type LikepostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likeposts.
     */
    data: XOR<LikepostUpdateManyMutationInput, LikepostUncheckedUpdateManyInput>
    /**
     * Filter which Likeposts to update
     */
    where?: LikepostWhereInput
  }

  /**
   * Likepost upsert
   */
  export type LikepostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * The filter to search for the Likepost to update in case it exists.
     */
    where: LikepostWhereUniqueInput
    /**
     * In case the Likepost found by the `where` argument doesn't exist, create a new Likepost with this data.
     */
    create: XOR<LikepostCreateInput, LikepostUncheckedCreateInput>
    /**
     * In case the Likepost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikepostUpdateInput, LikepostUncheckedUpdateInput>
  }

  /**
   * Likepost delete
   */
  export type LikepostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
    /**
     * Filter which Likepost to delete.
     */
    where: LikepostWhereUniqueInput
  }

  /**
   * Likepost deleteMany
   */
  export type LikepostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likeposts to delete
     */
    where?: LikepostWhereInput
  }

  /**
   * Likepost without action
   */
  export type LikepostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likepost
     */
    select?: LikepostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikepostInclude<ExtArgs> | null
  }


  /**
   * Model Likecomment
   */

  export type AggregateLikecomment = {
    _count: LikecommentCountAggregateOutputType | null
    _avg: LikecommentAvgAggregateOutputType | null
    _sum: LikecommentSumAggregateOutputType | null
    _min: LikecommentMinAggregateOutputType | null
    _max: LikecommentMaxAggregateOutputType | null
  }

  export type LikecommentAvgAggregateOutputType = {
    id: number | null
    likerId: number | null
    commentId: number | null
  }

  export type LikecommentSumAggregateOutputType = {
    id: number | null
    likerId: number | null
    commentId: number | null
  }

  export type LikecommentMinAggregateOutputType = {
    id: number | null
    likerId: number | null
    commentId: number | null
  }

  export type LikecommentMaxAggregateOutputType = {
    id: number | null
    likerId: number | null
    commentId: number | null
  }

  export type LikecommentCountAggregateOutputType = {
    id: number
    likerId: number
    commentId: number
    _all: number
  }


  export type LikecommentAvgAggregateInputType = {
    id?: true
    likerId?: true
    commentId?: true
  }

  export type LikecommentSumAggregateInputType = {
    id?: true
    likerId?: true
    commentId?: true
  }

  export type LikecommentMinAggregateInputType = {
    id?: true
    likerId?: true
    commentId?: true
  }

  export type LikecommentMaxAggregateInputType = {
    id?: true
    likerId?: true
    commentId?: true
  }

  export type LikecommentCountAggregateInputType = {
    id?: true
    likerId?: true
    commentId?: true
    _all?: true
  }

  export type LikecommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likecomment to aggregate.
     */
    where?: LikecommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likecomments to fetch.
     */
    orderBy?: LikecommentOrderByWithRelationInput | LikecommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikecommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likecomments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likecomments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likecomments
    **/
    _count?: true | LikecommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikecommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikecommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikecommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikecommentMaxAggregateInputType
  }

  export type GetLikecommentAggregateType<T extends LikecommentAggregateArgs> = {
        [P in keyof T & keyof AggregateLikecomment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikecomment[P]>
      : GetScalarType<T[P], AggregateLikecomment[P]>
  }




  export type LikecommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikecommentWhereInput
    orderBy?: LikecommentOrderByWithAggregationInput | LikecommentOrderByWithAggregationInput[]
    by: LikecommentScalarFieldEnum[] | LikecommentScalarFieldEnum
    having?: LikecommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikecommentCountAggregateInputType | true
    _avg?: LikecommentAvgAggregateInputType
    _sum?: LikecommentSumAggregateInputType
    _min?: LikecommentMinAggregateInputType
    _max?: LikecommentMaxAggregateInputType
  }

  export type LikecommentGroupByOutputType = {
    id: number
    likerId: number
    commentId: number
    _count: LikecommentCountAggregateOutputType | null
    _avg: LikecommentAvgAggregateOutputType | null
    _sum: LikecommentSumAggregateOutputType | null
    _min: LikecommentMinAggregateOutputType | null
    _max: LikecommentMaxAggregateOutputType | null
  }

  type GetLikecommentGroupByPayload<T extends LikecommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikecommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikecommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikecommentGroupByOutputType[P]>
            : GetScalarType<T[P], LikecommentGroupByOutputType[P]>
        }
      >
    >


  export type LikecommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likerId?: boolean
    commentId?: boolean
    liker?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likecomment"]>

  export type LikecommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likerId?: boolean
    commentId?: boolean
    liker?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likecomment"]>

  export type LikecommentSelectScalar = {
    id?: boolean
    likerId?: boolean
    commentId?: boolean
  }

  export type LikecommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    liker?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type LikecommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    liker?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }

  export type $LikecommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Likecomment"
    objects: {
      liker: Prisma.$UserPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      likerId: number
      commentId: number
    }, ExtArgs["result"]["likecomment"]>
    composites: {}
  }

  type LikecommentGetPayload<S extends boolean | null | undefined | LikecommentDefaultArgs> = $Result.GetResult<Prisma.$LikecommentPayload, S>

  type LikecommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikecommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikecommentCountAggregateInputType | true
    }

  export interface LikecommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Likecomment'], meta: { name: 'Likecomment' } }
    /**
     * Find zero or one Likecomment that matches the filter.
     * @param {LikecommentFindUniqueArgs} args - Arguments to find a Likecomment
     * @example
     * // Get one Likecomment
     * const likecomment = await prisma.likecomment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikecommentFindUniqueArgs>(args: SelectSubset<T, LikecommentFindUniqueArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Likecomment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikecommentFindUniqueOrThrowArgs} args - Arguments to find a Likecomment
     * @example
     * // Get one Likecomment
     * const likecomment = await prisma.likecomment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikecommentFindUniqueOrThrowArgs>(args: SelectSubset<T, LikecommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Likecomment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentFindFirstArgs} args - Arguments to find a Likecomment
     * @example
     * // Get one Likecomment
     * const likecomment = await prisma.likecomment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikecommentFindFirstArgs>(args?: SelectSubset<T, LikecommentFindFirstArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Likecomment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentFindFirstOrThrowArgs} args - Arguments to find a Likecomment
     * @example
     * // Get one Likecomment
     * const likecomment = await prisma.likecomment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikecommentFindFirstOrThrowArgs>(args?: SelectSubset<T, LikecommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likecomments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likecomments
     * const likecomments = await prisma.likecomment.findMany()
     * 
     * // Get first 10 Likecomments
     * const likecomments = await prisma.likecomment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likecommentWithIdOnly = await prisma.likecomment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikecommentFindManyArgs>(args?: SelectSubset<T, LikecommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Likecomment.
     * @param {LikecommentCreateArgs} args - Arguments to create a Likecomment.
     * @example
     * // Create one Likecomment
     * const Likecomment = await prisma.likecomment.create({
     *   data: {
     *     // ... data to create a Likecomment
     *   }
     * })
     * 
     */
    create<T extends LikecommentCreateArgs>(args: SelectSubset<T, LikecommentCreateArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likecomments.
     * @param {LikecommentCreateManyArgs} args - Arguments to create many Likecomments.
     * @example
     * // Create many Likecomments
     * const likecomment = await prisma.likecomment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikecommentCreateManyArgs>(args?: SelectSubset<T, LikecommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likecomments and returns the data saved in the database.
     * @param {LikecommentCreateManyAndReturnArgs} args - Arguments to create many Likecomments.
     * @example
     * // Create many Likecomments
     * const likecomment = await prisma.likecomment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likecomments and only return the `id`
     * const likecommentWithIdOnly = await prisma.likecomment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikecommentCreateManyAndReturnArgs>(args?: SelectSubset<T, LikecommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Likecomment.
     * @param {LikecommentDeleteArgs} args - Arguments to delete one Likecomment.
     * @example
     * // Delete one Likecomment
     * const Likecomment = await prisma.likecomment.delete({
     *   where: {
     *     // ... filter to delete one Likecomment
     *   }
     * })
     * 
     */
    delete<T extends LikecommentDeleteArgs>(args: SelectSubset<T, LikecommentDeleteArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Likecomment.
     * @param {LikecommentUpdateArgs} args - Arguments to update one Likecomment.
     * @example
     * // Update one Likecomment
     * const likecomment = await prisma.likecomment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikecommentUpdateArgs>(args: SelectSubset<T, LikecommentUpdateArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likecomments.
     * @param {LikecommentDeleteManyArgs} args - Arguments to filter Likecomments to delete.
     * @example
     * // Delete a few Likecomments
     * const { count } = await prisma.likecomment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikecommentDeleteManyArgs>(args?: SelectSubset<T, LikecommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likecomments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likecomments
     * const likecomment = await prisma.likecomment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikecommentUpdateManyArgs>(args: SelectSubset<T, LikecommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Likecomment.
     * @param {LikecommentUpsertArgs} args - Arguments to update or create a Likecomment.
     * @example
     * // Update or create a Likecomment
     * const likecomment = await prisma.likecomment.upsert({
     *   create: {
     *     // ... data to create a Likecomment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Likecomment we want to update
     *   }
     * })
     */
    upsert<T extends LikecommentUpsertArgs>(args: SelectSubset<T, LikecommentUpsertArgs<ExtArgs>>): Prisma__LikecommentClient<$Result.GetResult<Prisma.$LikecommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likecomments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentCountArgs} args - Arguments to filter Likecomments to count.
     * @example
     * // Count the number of Likecomments
     * const count = await prisma.likecomment.count({
     *   where: {
     *     // ... the filter for the Likecomments we want to count
     *   }
     * })
    **/
    count<T extends LikecommentCountArgs>(
      args?: Subset<T, LikecommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikecommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Likecomment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikecommentAggregateArgs>(args: Subset<T, LikecommentAggregateArgs>): Prisma.PrismaPromise<GetLikecommentAggregateType<T>>

    /**
     * Group by Likecomment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikecommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikecommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikecommentGroupByArgs['orderBy'] }
        : { orderBy?: LikecommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikecommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikecommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Likecomment model
   */
  readonly fields: LikecommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Likecomment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikecommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    liker<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Likecomment model
   */ 
  interface LikecommentFieldRefs {
    readonly id: FieldRef<"Likecomment", 'Int'>
    readonly likerId: FieldRef<"Likecomment", 'Int'>
    readonly commentId: FieldRef<"Likecomment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Likecomment findUnique
   */
  export type LikecommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * Filter, which Likecomment to fetch.
     */
    where: LikecommentWhereUniqueInput
  }

  /**
   * Likecomment findUniqueOrThrow
   */
  export type LikecommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * Filter, which Likecomment to fetch.
     */
    where: LikecommentWhereUniqueInput
  }

  /**
   * Likecomment findFirst
   */
  export type LikecommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * Filter, which Likecomment to fetch.
     */
    where?: LikecommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likecomments to fetch.
     */
    orderBy?: LikecommentOrderByWithRelationInput | LikecommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likecomments.
     */
    cursor?: LikecommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likecomments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likecomments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likecomments.
     */
    distinct?: LikecommentScalarFieldEnum | LikecommentScalarFieldEnum[]
  }

  /**
   * Likecomment findFirstOrThrow
   */
  export type LikecommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * Filter, which Likecomment to fetch.
     */
    where?: LikecommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likecomments to fetch.
     */
    orderBy?: LikecommentOrderByWithRelationInput | LikecommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likecomments.
     */
    cursor?: LikecommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likecomments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likecomments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likecomments.
     */
    distinct?: LikecommentScalarFieldEnum | LikecommentScalarFieldEnum[]
  }

  /**
   * Likecomment findMany
   */
  export type LikecommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * Filter, which Likecomments to fetch.
     */
    where?: LikecommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likecomments to fetch.
     */
    orderBy?: LikecommentOrderByWithRelationInput | LikecommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likecomments.
     */
    cursor?: LikecommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likecomments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likecomments.
     */
    skip?: number
    distinct?: LikecommentScalarFieldEnum | LikecommentScalarFieldEnum[]
  }

  /**
   * Likecomment create
   */
  export type LikecommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Likecomment.
     */
    data: XOR<LikecommentCreateInput, LikecommentUncheckedCreateInput>
  }

  /**
   * Likecomment createMany
   */
  export type LikecommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likecomments.
     */
    data: LikecommentCreateManyInput | LikecommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Likecomment createManyAndReturn
   */
  export type LikecommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Likecomments.
     */
    data: LikecommentCreateManyInput | LikecommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Likecomment update
   */
  export type LikecommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Likecomment.
     */
    data: XOR<LikecommentUpdateInput, LikecommentUncheckedUpdateInput>
    /**
     * Choose, which Likecomment to update.
     */
    where: LikecommentWhereUniqueInput
  }

  /**
   * Likecomment updateMany
   */
  export type LikecommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likecomments.
     */
    data: XOR<LikecommentUpdateManyMutationInput, LikecommentUncheckedUpdateManyInput>
    /**
     * Filter which Likecomments to update
     */
    where?: LikecommentWhereInput
  }

  /**
   * Likecomment upsert
   */
  export type LikecommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Likecomment to update in case it exists.
     */
    where: LikecommentWhereUniqueInput
    /**
     * In case the Likecomment found by the `where` argument doesn't exist, create a new Likecomment with this data.
     */
    create: XOR<LikecommentCreateInput, LikecommentUncheckedCreateInput>
    /**
     * In case the Likecomment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikecommentUpdateInput, LikecommentUncheckedUpdateInput>
  }

  /**
   * Likecomment delete
   */
  export type LikecommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
    /**
     * Filter which Likecomment to delete.
     */
    where: LikecommentWhereUniqueInput
  }

  /**
   * Likecomment deleteMany
   */
  export type LikecommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likecomments to delete
     */
    where?: LikecommentWhereInput
  }

  /**
   * Likecomment without action
   */
  export type LikecommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likecomment
     */
    select?: LikecommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikecommentInclude<ExtArgs> | null
  }


  /**
   * Model Likemessage
   */

  export type AggregateLikemessage = {
    _count: LikemessageCountAggregateOutputType | null
    _avg: LikemessageAvgAggregateOutputType | null
    _sum: LikemessageSumAggregateOutputType | null
    _min: LikemessageMinAggregateOutputType | null
    _max: LikemessageMaxAggregateOutputType | null
  }

  export type LikemessageAvgAggregateOutputType = {
    id: number | null
    likerId: number | null
    messageId: number | null
  }

  export type LikemessageSumAggregateOutputType = {
    id: number | null
    likerId: number | null
    messageId: number | null
  }

  export type LikemessageMinAggregateOutputType = {
    id: number | null
    likerId: number | null
    messageId: number | null
  }

  export type LikemessageMaxAggregateOutputType = {
    id: number | null
    likerId: number | null
    messageId: number | null
  }

  export type LikemessageCountAggregateOutputType = {
    id: number
    likerId: number
    messageId: number
    _all: number
  }


  export type LikemessageAvgAggregateInputType = {
    id?: true
    likerId?: true
    messageId?: true
  }

  export type LikemessageSumAggregateInputType = {
    id?: true
    likerId?: true
    messageId?: true
  }

  export type LikemessageMinAggregateInputType = {
    id?: true
    likerId?: true
    messageId?: true
  }

  export type LikemessageMaxAggregateInputType = {
    id?: true
    likerId?: true
    messageId?: true
  }

  export type LikemessageCountAggregateInputType = {
    id?: true
    likerId?: true
    messageId?: true
    _all?: true
  }

  export type LikemessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likemessage to aggregate.
     */
    where?: LikemessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likemessages to fetch.
     */
    orderBy?: LikemessageOrderByWithRelationInput | LikemessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikemessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likemessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likemessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likemessages
    **/
    _count?: true | LikemessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikemessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikemessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikemessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikemessageMaxAggregateInputType
  }

  export type GetLikemessageAggregateType<T extends LikemessageAggregateArgs> = {
        [P in keyof T & keyof AggregateLikemessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikemessage[P]>
      : GetScalarType<T[P], AggregateLikemessage[P]>
  }




  export type LikemessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikemessageWhereInput
    orderBy?: LikemessageOrderByWithAggregationInput | LikemessageOrderByWithAggregationInput[]
    by: LikemessageScalarFieldEnum[] | LikemessageScalarFieldEnum
    having?: LikemessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikemessageCountAggregateInputType | true
    _avg?: LikemessageAvgAggregateInputType
    _sum?: LikemessageSumAggregateInputType
    _min?: LikemessageMinAggregateInputType
    _max?: LikemessageMaxAggregateInputType
  }

  export type LikemessageGroupByOutputType = {
    id: number
    likerId: number
    messageId: number
    _count: LikemessageCountAggregateOutputType | null
    _avg: LikemessageAvgAggregateOutputType | null
    _sum: LikemessageSumAggregateOutputType | null
    _min: LikemessageMinAggregateOutputType | null
    _max: LikemessageMaxAggregateOutputType | null
  }

  type GetLikemessageGroupByPayload<T extends LikemessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikemessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikemessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikemessageGroupByOutputType[P]>
            : GetScalarType<T[P], LikemessageGroupByOutputType[P]>
        }
      >
    >


  export type LikemessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likerId?: boolean
    messageId?: boolean
    liker?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likemessage"]>

  export type LikemessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    likerId?: boolean
    messageId?: boolean
    liker?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likemessage"]>

  export type LikemessageSelectScalar = {
    id?: boolean
    likerId?: boolean
    messageId?: boolean
  }

  export type LikemessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    liker?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type LikemessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    liker?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $LikemessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Likemessage"
    objects: {
      liker: Prisma.$UserPayload<ExtArgs>
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      likerId: number
      messageId: number
    }, ExtArgs["result"]["likemessage"]>
    composites: {}
  }

  type LikemessageGetPayload<S extends boolean | null | undefined | LikemessageDefaultArgs> = $Result.GetResult<Prisma.$LikemessagePayload, S>

  type LikemessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikemessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikemessageCountAggregateInputType | true
    }

  export interface LikemessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Likemessage'], meta: { name: 'Likemessage' } }
    /**
     * Find zero or one Likemessage that matches the filter.
     * @param {LikemessageFindUniqueArgs} args - Arguments to find a Likemessage
     * @example
     * // Get one Likemessage
     * const likemessage = await prisma.likemessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikemessageFindUniqueArgs>(args: SelectSubset<T, LikemessageFindUniqueArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Likemessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikemessageFindUniqueOrThrowArgs} args - Arguments to find a Likemessage
     * @example
     * // Get one Likemessage
     * const likemessage = await prisma.likemessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikemessageFindUniqueOrThrowArgs>(args: SelectSubset<T, LikemessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Likemessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageFindFirstArgs} args - Arguments to find a Likemessage
     * @example
     * // Get one Likemessage
     * const likemessage = await prisma.likemessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikemessageFindFirstArgs>(args?: SelectSubset<T, LikemessageFindFirstArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Likemessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageFindFirstOrThrowArgs} args - Arguments to find a Likemessage
     * @example
     * // Get one Likemessage
     * const likemessage = await prisma.likemessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikemessageFindFirstOrThrowArgs>(args?: SelectSubset<T, LikemessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Likemessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likemessages
     * const likemessages = await prisma.likemessage.findMany()
     * 
     * // Get first 10 Likemessages
     * const likemessages = await prisma.likemessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likemessageWithIdOnly = await prisma.likemessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikemessageFindManyArgs>(args?: SelectSubset<T, LikemessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Likemessage.
     * @param {LikemessageCreateArgs} args - Arguments to create a Likemessage.
     * @example
     * // Create one Likemessage
     * const Likemessage = await prisma.likemessage.create({
     *   data: {
     *     // ... data to create a Likemessage
     *   }
     * })
     * 
     */
    create<T extends LikemessageCreateArgs>(args: SelectSubset<T, LikemessageCreateArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Likemessages.
     * @param {LikemessageCreateManyArgs} args - Arguments to create many Likemessages.
     * @example
     * // Create many Likemessages
     * const likemessage = await prisma.likemessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikemessageCreateManyArgs>(args?: SelectSubset<T, LikemessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likemessages and returns the data saved in the database.
     * @param {LikemessageCreateManyAndReturnArgs} args - Arguments to create many Likemessages.
     * @example
     * // Create many Likemessages
     * const likemessage = await prisma.likemessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likemessages and only return the `id`
     * const likemessageWithIdOnly = await prisma.likemessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikemessageCreateManyAndReturnArgs>(args?: SelectSubset<T, LikemessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Likemessage.
     * @param {LikemessageDeleteArgs} args - Arguments to delete one Likemessage.
     * @example
     * // Delete one Likemessage
     * const Likemessage = await prisma.likemessage.delete({
     *   where: {
     *     // ... filter to delete one Likemessage
     *   }
     * })
     * 
     */
    delete<T extends LikemessageDeleteArgs>(args: SelectSubset<T, LikemessageDeleteArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Likemessage.
     * @param {LikemessageUpdateArgs} args - Arguments to update one Likemessage.
     * @example
     * // Update one Likemessage
     * const likemessage = await prisma.likemessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikemessageUpdateArgs>(args: SelectSubset<T, LikemessageUpdateArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Likemessages.
     * @param {LikemessageDeleteManyArgs} args - Arguments to filter Likemessages to delete.
     * @example
     * // Delete a few Likemessages
     * const { count } = await prisma.likemessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikemessageDeleteManyArgs>(args?: SelectSubset<T, LikemessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likemessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likemessages
     * const likemessage = await prisma.likemessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikemessageUpdateManyArgs>(args: SelectSubset<T, LikemessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Likemessage.
     * @param {LikemessageUpsertArgs} args - Arguments to update or create a Likemessage.
     * @example
     * // Update or create a Likemessage
     * const likemessage = await prisma.likemessage.upsert({
     *   create: {
     *     // ... data to create a Likemessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Likemessage we want to update
     *   }
     * })
     */
    upsert<T extends LikemessageUpsertArgs>(args: SelectSubset<T, LikemessageUpsertArgs<ExtArgs>>): Prisma__LikemessageClient<$Result.GetResult<Prisma.$LikemessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Likemessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageCountArgs} args - Arguments to filter Likemessages to count.
     * @example
     * // Count the number of Likemessages
     * const count = await prisma.likemessage.count({
     *   where: {
     *     // ... the filter for the Likemessages we want to count
     *   }
     * })
    **/
    count<T extends LikemessageCountArgs>(
      args?: Subset<T, LikemessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikemessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Likemessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikemessageAggregateArgs>(args: Subset<T, LikemessageAggregateArgs>): Prisma.PrismaPromise<GetLikemessageAggregateType<T>>

    /**
     * Group by Likemessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikemessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikemessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikemessageGroupByArgs['orderBy'] }
        : { orderBy?: LikemessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikemessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikemessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Likemessage model
   */
  readonly fields: LikemessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Likemessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikemessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    liker<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Likemessage model
   */ 
  interface LikemessageFieldRefs {
    readonly id: FieldRef<"Likemessage", 'Int'>
    readonly likerId: FieldRef<"Likemessage", 'Int'>
    readonly messageId: FieldRef<"Likemessage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Likemessage findUnique
   */
  export type LikemessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * Filter, which Likemessage to fetch.
     */
    where: LikemessageWhereUniqueInput
  }

  /**
   * Likemessage findUniqueOrThrow
   */
  export type LikemessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * Filter, which Likemessage to fetch.
     */
    where: LikemessageWhereUniqueInput
  }

  /**
   * Likemessage findFirst
   */
  export type LikemessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * Filter, which Likemessage to fetch.
     */
    where?: LikemessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likemessages to fetch.
     */
    orderBy?: LikemessageOrderByWithRelationInput | LikemessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likemessages.
     */
    cursor?: LikemessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likemessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likemessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likemessages.
     */
    distinct?: LikemessageScalarFieldEnum | LikemessageScalarFieldEnum[]
  }

  /**
   * Likemessage findFirstOrThrow
   */
  export type LikemessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * Filter, which Likemessage to fetch.
     */
    where?: LikemessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likemessages to fetch.
     */
    orderBy?: LikemessageOrderByWithRelationInput | LikemessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likemessages.
     */
    cursor?: LikemessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likemessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likemessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likemessages.
     */
    distinct?: LikemessageScalarFieldEnum | LikemessageScalarFieldEnum[]
  }

  /**
   * Likemessage findMany
   */
  export type LikemessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * Filter, which Likemessages to fetch.
     */
    where?: LikemessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likemessages to fetch.
     */
    orderBy?: LikemessageOrderByWithRelationInput | LikemessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likemessages.
     */
    cursor?: LikemessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likemessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likemessages.
     */
    skip?: number
    distinct?: LikemessageScalarFieldEnum | LikemessageScalarFieldEnum[]
  }

  /**
   * Likemessage create
   */
  export type LikemessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Likemessage.
     */
    data: XOR<LikemessageCreateInput, LikemessageUncheckedCreateInput>
  }

  /**
   * Likemessage createMany
   */
  export type LikemessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likemessages.
     */
    data: LikemessageCreateManyInput | LikemessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Likemessage createManyAndReturn
   */
  export type LikemessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Likemessages.
     */
    data: LikemessageCreateManyInput | LikemessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Likemessage update
   */
  export type LikemessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Likemessage.
     */
    data: XOR<LikemessageUpdateInput, LikemessageUncheckedUpdateInput>
    /**
     * Choose, which Likemessage to update.
     */
    where: LikemessageWhereUniqueInput
  }

  /**
   * Likemessage updateMany
   */
  export type LikemessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likemessages.
     */
    data: XOR<LikemessageUpdateManyMutationInput, LikemessageUncheckedUpdateManyInput>
    /**
     * Filter which Likemessages to update
     */
    where?: LikemessageWhereInput
  }

  /**
   * Likemessage upsert
   */
  export type LikemessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Likemessage to update in case it exists.
     */
    where: LikemessageWhereUniqueInput
    /**
     * In case the Likemessage found by the `where` argument doesn't exist, create a new Likemessage with this data.
     */
    create: XOR<LikemessageCreateInput, LikemessageUncheckedCreateInput>
    /**
     * In case the Likemessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikemessageUpdateInput, LikemessageUncheckedUpdateInput>
  }

  /**
   * Likemessage delete
   */
  export type LikemessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
    /**
     * Filter which Likemessage to delete.
     */
    where: LikemessageWhereUniqueInput
  }

  /**
   * Likemessage deleteMany
   */
  export type LikemessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likemessages to delete
     */
    where?: LikemessageWhereInput
  }

  /**
   * Likemessage without action
   */
  export type LikemessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likemessage
     */
    select?: LikemessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikemessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    username: 'username',
    email: 'email',
    password: 'password',
    profileInfo: 'profileInfo'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RelationshipScalarFieldEnum: {
    id: 'id',
    user1Id: 'user1Id',
    user2Id: 'user2Id',
    requestingUserId: 'requestingUserId',
    pending: 'pending',
    accepted: 'accepted',
    blockeduser1: 'blockeduser1',
    blockeduser2: 'blockeduser2'
  };

  export type RelationshipScalarFieldEnum = (typeof RelationshipScalarFieldEnum)[keyof typeof RelationshipScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    title: 'title',
    content: 'content',
    ownerId: 'ownerId',
    pageOwnerId: 'pageOwnerId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    content: 'content',
    postId: 'postId',
    ownerId: 'ownerId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    dateCreated: 'dateCreated',
    content: 'content',
    senderId: 'senderId',
    receiverId: 'receiverId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const LikepostScalarFieldEnum: {
    id: 'id',
    likerId: 'likerId',
    postId: 'postId'
  };

  export type LikepostScalarFieldEnum = (typeof LikepostScalarFieldEnum)[keyof typeof LikepostScalarFieldEnum]


  export const LikecommentScalarFieldEnum: {
    id: 'id',
    likerId: 'likerId',
    commentId: 'commentId'
  };

  export type LikecommentScalarFieldEnum = (typeof LikecommentScalarFieldEnum)[keyof typeof LikecommentScalarFieldEnum]


  export const LikemessageScalarFieldEnum: {
    id: 'id',
    likerId: 'likerId',
    messageId: 'messageId'
  };

  export type LikemessageScalarFieldEnum = (typeof LikemessageScalarFieldEnum)[keyof typeof LikemessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const UserOrderByRelevanceFieldEnum: {
    username: 'username',
    email: 'email',
    password: 'password',
    profileInfo: 'profileInfo'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const PostOrderByRelevanceFieldEnum: {
    title: 'title',
    content: 'content'
  };

  export type PostOrderByRelevanceFieldEnum = (typeof PostOrderByRelevanceFieldEnum)[keyof typeof PostOrderByRelevanceFieldEnum]


  export const CommentOrderByRelevanceFieldEnum: {
    content: 'content'
  };

  export type CommentOrderByRelevanceFieldEnum = (typeof CommentOrderByRelevanceFieldEnum)[keyof typeof CommentOrderByRelevanceFieldEnum]


  export const MessageOrderByRelevanceFieldEnum: {
    content: 'content'
  };

  export type MessageOrderByRelevanceFieldEnum = (typeof MessageOrderByRelevanceFieldEnum)[keyof typeof MessageOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    dateCreated?: DateTimeFilter<"User"> | Date | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profileInfo?: StringFilter<"User"> | string
    posts?: PostListRelationFilter
    profilePosts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    user1?: RelationshipListRelationFilter
    user2?: RelationshipListRelationFilter
    requestingUser?: RelationshipListRelationFilter
    sender?: MessageListRelationFilter
    receiver?: MessageListRelationFilter
    postLikes?: LikepostListRelationFilter
    commentLikes?: LikecommentListRelationFilter
    messageLikes?: LikemessageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileInfo?: SortOrder
    posts?: PostOrderByRelationAggregateInput
    profilePosts?: PostOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    user1?: RelationshipOrderByRelationAggregateInput
    user2?: RelationshipOrderByRelationAggregateInput
    requestingUser?: RelationshipOrderByRelationAggregateInput
    sender?: MessageOrderByRelationAggregateInput
    receiver?: MessageOrderByRelationAggregateInput
    postLikes?: LikepostOrderByRelationAggregateInput
    commentLikes?: LikecommentOrderByRelationAggregateInput
    messageLikes?: LikemessageOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    dateCreated?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    profileInfo?: StringFilter<"User"> | string
    posts?: PostListRelationFilter
    profilePosts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    user1?: RelationshipListRelationFilter
    user2?: RelationshipListRelationFilter
    requestingUser?: RelationshipListRelationFilter
    sender?: MessageListRelationFilter
    receiver?: MessageListRelationFilter
    postLikes?: LikepostListRelationFilter
    commentLikes?: LikecommentListRelationFilter
    messageLikes?: LikemessageListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileInfo?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    dateCreated?: DateTimeWithAggregatesFilter<"User"> | Date | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    profileInfo?: StringWithAggregatesFilter<"User"> | string
  }

  export type RelationshipWhereInput = {
    AND?: RelationshipWhereInput | RelationshipWhereInput[]
    OR?: RelationshipWhereInput[]
    NOT?: RelationshipWhereInput | RelationshipWhereInput[]
    id?: IntFilter<"Relationship"> | number
    user1Id?: IntFilter<"Relationship"> | number
    user2Id?: IntFilter<"Relationship"> | number
    requestingUserId?: IntFilter<"Relationship"> | number
    pending?: BoolFilter<"Relationship"> | boolean
    accepted?: BoolFilter<"Relationship"> | boolean
    blockeduser1?: BoolNullableFilter<"Relationship"> | boolean | null
    blockeduser2?: BoolNullableFilter<"Relationship"> | boolean | null
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user2?: XOR<UserRelationFilter, UserWhereInput>
    requestingUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RelationshipOrderByWithRelationInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
    pending?: SortOrder
    accepted?: SortOrder
    blockeduser1?: SortOrderInput | SortOrder
    blockeduser2?: SortOrderInput | SortOrder
    user1?: UserOrderByWithRelationInput
    user2?: UserOrderByWithRelationInput
    requestingUser?: UserOrderByWithRelationInput
  }

  export type RelationshipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RelationshipWhereInput | RelationshipWhereInput[]
    OR?: RelationshipWhereInput[]
    NOT?: RelationshipWhereInput | RelationshipWhereInput[]
    user1Id?: IntFilter<"Relationship"> | number
    user2Id?: IntFilter<"Relationship"> | number
    requestingUserId?: IntFilter<"Relationship"> | number
    pending?: BoolFilter<"Relationship"> | boolean
    accepted?: BoolFilter<"Relationship"> | boolean
    blockeduser1?: BoolNullableFilter<"Relationship"> | boolean | null
    blockeduser2?: BoolNullableFilter<"Relationship"> | boolean | null
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user2?: XOR<UserRelationFilter, UserWhereInput>
    requestingUser?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type RelationshipOrderByWithAggregationInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
    pending?: SortOrder
    accepted?: SortOrder
    blockeduser1?: SortOrderInput | SortOrder
    blockeduser2?: SortOrderInput | SortOrder
    _count?: RelationshipCountOrderByAggregateInput
    _avg?: RelationshipAvgOrderByAggregateInput
    _max?: RelationshipMaxOrderByAggregateInput
    _min?: RelationshipMinOrderByAggregateInput
    _sum?: RelationshipSumOrderByAggregateInput
  }

  export type RelationshipScalarWhereWithAggregatesInput = {
    AND?: RelationshipScalarWhereWithAggregatesInput | RelationshipScalarWhereWithAggregatesInput[]
    OR?: RelationshipScalarWhereWithAggregatesInput[]
    NOT?: RelationshipScalarWhereWithAggregatesInput | RelationshipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Relationship"> | number
    user1Id?: IntWithAggregatesFilter<"Relationship"> | number
    user2Id?: IntWithAggregatesFilter<"Relationship"> | number
    requestingUserId?: IntWithAggregatesFilter<"Relationship"> | number
    pending?: BoolWithAggregatesFilter<"Relationship"> | boolean
    accepted?: BoolWithAggregatesFilter<"Relationship"> | boolean
    blockeduser1?: BoolNullableWithAggregatesFilter<"Relationship"> | boolean | null
    blockeduser2?: BoolNullableWithAggregatesFilter<"Relationship"> | boolean | null
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    dateCreated?: DateTimeFilter<"Post"> | Date | string
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    ownerId?: IntFilter<"Post"> | number
    pageOwnerId?: IntFilter<"Post"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    pageOwner?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: LikepostListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    title?: SortOrder
    content?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    pageOwner?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: LikepostOrderByRelationAggregateInput
    _relevance?: PostOrderByRelevanceInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    dateCreated?: DateTimeFilter<"Post"> | Date | string
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    ownerId?: IntFilter<"Post"> | number
    pageOwnerId?: IntFilter<"Post"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    pageOwner?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: LikepostListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    title?: SortOrder
    content?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    dateCreated?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    title?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    ownerId?: IntWithAggregatesFilter<"Post"> | number
    pageOwnerId?: IntWithAggregatesFilter<"Post"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    dateCreated?: DateTimeFilter<"Comment"> | Date | string
    content?: StringFilter<"Comment"> | string
    postId?: IntFilter<"Comment"> | number
    ownerId?: IntFilter<"Comment"> | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    owner?: XOR<UserRelationFilter, UserWhereInput>
    likes?: LikecommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
    post?: PostOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
    likes?: LikecommentOrderByRelationAggregateInput
    _relevance?: CommentOrderByRelevanceInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    dateCreated?: DateTimeFilter<"Comment"> | Date | string
    content?: StringFilter<"Comment"> | string
    postId?: IntFilter<"Comment"> | number
    ownerId?: IntFilter<"Comment"> | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    owner?: XOR<UserRelationFilter, UserWhereInput>
    likes?: LikecommentListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    dateCreated?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    postId?: IntWithAggregatesFilter<"Comment"> | number
    ownerId?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    dateCreated?: DateTimeFilter<"Message"> | Date | string
    content?: StringFilter<"Message"> | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    likes?: LikemessageListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    likes?: LikemessageOrderByRelationAggregateInput
    _relevance?: MessageOrderByRelevanceInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    dateCreated?: DateTimeFilter<"Message"> | Date | string
    content?: StringFilter<"Message"> | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    likes?: LikemessageListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    dateCreated?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    content?: StringWithAggregatesFilter<"Message"> | string
    senderId?: IntWithAggregatesFilter<"Message"> | number
    receiverId?: IntWithAggregatesFilter<"Message"> | number
  }

  export type LikepostWhereInput = {
    AND?: LikepostWhereInput | LikepostWhereInput[]
    OR?: LikepostWhereInput[]
    NOT?: LikepostWhereInput | LikepostWhereInput[]
    id?: IntFilter<"Likepost"> | number
    likerId?: IntFilter<"Likepost"> | number
    postId?: IntFilter<"Likepost"> | number
    liker?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type LikepostOrderByWithRelationInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
    liker?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type LikepostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikepostWhereInput | LikepostWhereInput[]
    OR?: LikepostWhereInput[]
    NOT?: LikepostWhereInput | LikepostWhereInput[]
    likerId?: IntFilter<"Likepost"> | number
    postId?: IntFilter<"Likepost"> | number
    liker?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "id">

  export type LikepostOrderByWithAggregationInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
    _count?: LikepostCountOrderByAggregateInput
    _avg?: LikepostAvgOrderByAggregateInput
    _max?: LikepostMaxOrderByAggregateInput
    _min?: LikepostMinOrderByAggregateInput
    _sum?: LikepostSumOrderByAggregateInput
  }

  export type LikepostScalarWhereWithAggregatesInput = {
    AND?: LikepostScalarWhereWithAggregatesInput | LikepostScalarWhereWithAggregatesInput[]
    OR?: LikepostScalarWhereWithAggregatesInput[]
    NOT?: LikepostScalarWhereWithAggregatesInput | LikepostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Likepost"> | number
    likerId?: IntWithAggregatesFilter<"Likepost"> | number
    postId?: IntWithAggregatesFilter<"Likepost"> | number
  }

  export type LikecommentWhereInput = {
    AND?: LikecommentWhereInput | LikecommentWhereInput[]
    OR?: LikecommentWhereInput[]
    NOT?: LikecommentWhereInput | LikecommentWhereInput[]
    id?: IntFilter<"Likecomment"> | number
    likerId?: IntFilter<"Likecomment"> | number
    commentId?: IntFilter<"Likecomment"> | number
    liker?: XOR<UserRelationFilter, UserWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type LikecommentOrderByWithRelationInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
    liker?: UserOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type LikecommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikecommentWhereInput | LikecommentWhereInput[]
    OR?: LikecommentWhereInput[]
    NOT?: LikecommentWhereInput | LikecommentWhereInput[]
    likerId?: IntFilter<"Likecomment"> | number
    commentId?: IntFilter<"Likecomment"> | number
    liker?: XOR<UserRelationFilter, UserWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "id">

  export type LikecommentOrderByWithAggregationInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
    _count?: LikecommentCountOrderByAggregateInput
    _avg?: LikecommentAvgOrderByAggregateInput
    _max?: LikecommentMaxOrderByAggregateInput
    _min?: LikecommentMinOrderByAggregateInput
    _sum?: LikecommentSumOrderByAggregateInput
  }

  export type LikecommentScalarWhereWithAggregatesInput = {
    AND?: LikecommentScalarWhereWithAggregatesInput | LikecommentScalarWhereWithAggregatesInput[]
    OR?: LikecommentScalarWhereWithAggregatesInput[]
    NOT?: LikecommentScalarWhereWithAggregatesInput | LikecommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Likecomment"> | number
    likerId?: IntWithAggregatesFilter<"Likecomment"> | number
    commentId?: IntWithAggregatesFilter<"Likecomment"> | number
  }

  export type LikemessageWhereInput = {
    AND?: LikemessageWhereInput | LikemessageWhereInput[]
    OR?: LikemessageWhereInput[]
    NOT?: LikemessageWhereInput | LikemessageWhereInput[]
    id?: IntFilter<"Likemessage"> | number
    likerId?: IntFilter<"Likemessage"> | number
    messageId?: IntFilter<"Likemessage"> | number
    liker?: XOR<UserRelationFilter, UserWhereInput>
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type LikemessageOrderByWithRelationInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
    liker?: UserOrderByWithRelationInput
    message?: MessageOrderByWithRelationInput
  }

  export type LikemessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikemessageWhereInput | LikemessageWhereInput[]
    OR?: LikemessageWhereInput[]
    NOT?: LikemessageWhereInput | LikemessageWhereInput[]
    likerId?: IntFilter<"Likemessage"> | number
    messageId?: IntFilter<"Likemessage"> | number
    liker?: XOR<UserRelationFilter, UserWhereInput>
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }, "id">

  export type LikemessageOrderByWithAggregationInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
    _count?: LikemessageCountOrderByAggregateInput
    _avg?: LikemessageAvgOrderByAggregateInput
    _max?: LikemessageMaxOrderByAggregateInput
    _min?: LikemessageMinOrderByAggregateInput
    _sum?: LikemessageSumOrderByAggregateInput
  }

  export type LikemessageScalarWhereWithAggregatesInput = {
    AND?: LikemessageScalarWhereWithAggregatesInput | LikemessageScalarWhereWithAggregatesInput[]
    OR?: LikemessageScalarWhereWithAggregatesInput[]
    NOT?: LikemessageScalarWhereWithAggregatesInput | LikemessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Likemessage"> | number
    likerId?: IntWithAggregatesFilter<"Likemessage"> | number
    messageId?: IntWithAggregatesFilter<"Likemessage"> | number
  }

  export type UserCreateInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserUpdateInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
  }

  export type UserUpdateManyMutationInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipCreateInput = {
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
    user1: UserCreateNestedOneWithoutUser1Input
    user2: UserCreateNestedOneWithoutUser2Input
    requestingUser: UserCreateNestedOneWithoutRequestingUserInput
  }

  export type RelationshipUncheckedCreateInput = {
    id?: number
    user1Id: number
    user2Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipUpdateInput = {
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user1?: UserUpdateOneRequiredWithoutUser1NestedInput
    user2?: UserUpdateOneRequiredWithoutUser2NestedInput
    requestingUser?: UserUpdateOneRequiredWithoutRequestingUserNestedInput
  }

  export type RelationshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    requestingUserId?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipCreateManyInput = {
    id?: number
    user1Id: number
    user2Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipUpdateManyMutationInput = {
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    requestingUserId?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PostCreateInput = {
    dateCreated?: Date | string
    title: string
    content: string
    owner: UserCreateNestedOneWithoutPostsInput
    pageOwner: UserCreateNestedOneWithoutProfilePostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: LikepostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    ownerId: number
    pageOwnerId: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: LikepostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutPostsNestedInput
    pageOwner?: UserUpdateOneRequiredWithoutProfilePostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: LikepostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    pageOwnerId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: LikepostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    ownerId: number
    pageOwnerId: number
  }

  export type PostUpdateManyMutationInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    pageOwnerId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    dateCreated?: Date | string
    content: string
    post: PostCreateNestedOneWithoutCommentsInput
    owner: UserCreateNestedOneWithoutCommentsInput
    likes?: LikecommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    postId: number
    ownerId: number
    likes?: LikecommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    owner?: UserUpdateOneRequiredWithoutCommentsNestedInput
    likes?: LikecommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    likes?: LikecommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    postId: number
    ownerId: number
  }

  export type CommentUpdateManyMutationInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    dateCreated?: Date | string
    content: string
    sender: UserCreateNestedOneWithoutSenderInput
    receiver: UserCreateNestedOneWithoutReceiverInput
    likes?: LikemessageCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    senderId: number
    receiverId: number
    likes?: LikemessageUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    sender?: UserUpdateOneRequiredWithoutSenderNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceiverNestedInput
    likes?: LikemessageUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    likes?: LikemessageUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    senderId: number
    receiverId: number
  }

  export type MessageUpdateManyMutationInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type LikepostCreateInput = {
    liker: UserCreateNestedOneWithoutPostLikesInput
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type LikepostUncheckedCreateInput = {
    id?: number
    likerId: number
    postId: number
  }

  export type LikepostUpdateInput = {
    liker?: UserUpdateOneRequiredWithoutPostLikesNestedInput
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikepostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type LikepostCreateManyInput = {
    id?: number
    likerId: number
    postId: number
  }

  export type LikepostUpdateManyMutationInput = {

  }

  export type LikepostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type LikecommentCreateInput = {
    liker: UserCreateNestedOneWithoutCommentLikesInput
    comment: CommentCreateNestedOneWithoutLikesInput
  }

  export type LikecommentUncheckedCreateInput = {
    id?: number
    likerId: number
    commentId: number
  }

  export type LikecommentUpdateInput = {
    liker?: UserUpdateOneRequiredWithoutCommentLikesNestedInput
    comment?: CommentUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikecommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type LikecommentCreateManyInput = {
    id?: number
    likerId: number
    commentId: number
  }

  export type LikecommentUpdateManyMutationInput = {

  }

  export type LikecommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type LikemessageCreateInput = {
    liker: UserCreateNestedOneWithoutMessageLikesInput
    message: MessageCreateNestedOneWithoutLikesInput
  }

  export type LikemessageUncheckedCreateInput = {
    id?: number
    likerId: number
    messageId: number
  }

  export type LikemessageUpdateInput = {
    liker?: UserUpdateOneRequiredWithoutMessageLikesNestedInput
    message?: MessageUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikemessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
  }

  export type LikemessageCreateManyInput = {
    id?: number
    likerId: number
    messageId: number
  }

  export type LikemessageUpdateManyMutationInput = {

  }

  export type LikemessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type RelationshipListRelationFilter = {
    every?: RelationshipWhereInput
    some?: RelationshipWhereInput
    none?: RelationshipWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type LikepostListRelationFilter = {
    every?: LikepostWhereInput
    some?: LikepostWhereInput
    none?: LikepostWhereInput
  }

  export type LikecommentListRelationFilter = {
    every?: LikecommentWhereInput
    some?: LikecommentWhereInput
    none?: LikecommentWhereInput
  }

  export type LikemessageListRelationFilter = {
    every?: LikemessageWhereInput
    some?: LikemessageWhereInput
    none?: LikemessageWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelationshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikepostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikecommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikemessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileInfo?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileInfo?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileInfo?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RelationshipCountOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
    pending?: SortOrder
    accepted?: SortOrder
    blockeduser1?: SortOrder
    blockeduser2?: SortOrder
  }

  export type RelationshipAvgOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
  }

  export type RelationshipMaxOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
    pending?: SortOrder
    accepted?: SortOrder
    blockeduser1?: SortOrder
    blockeduser2?: SortOrder
  }

  export type RelationshipMinOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
    pending?: SortOrder
    accepted?: SortOrder
    blockeduser1?: SortOrder
    blockeduser2?: SortOrder
  }

  export type RelationshipSumOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    requestingUserId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PostOrderByRelevanceInput = {
    fields: PostOrderByRelevanceFieldEnum | PostOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    title?: SortOrder
    content?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    title?: SortOrder
    content?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    title?: SortOrder
    content?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    pageOwnerId?: SortOrder
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type CommentOrderByRelevanceInput = {
    fields: CommentOrderByRelevanceFieldEnum | CommentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    ownerId?: SortOrder
  }

  export type MessageOrderByRelevanceInput = {
    fields: MessageOrderByRelevanceFieldEnum | MessageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    dateCreated?: SortOrder
    content?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type LikepostCountOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
  }

  export type LikepostAvgOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
  }

  export type LikepostMaxOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
  }

  export type LikepostMinOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
  }

  export type LikepostSumOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    postId?: SortOrder
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type LikecommentCountOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
  }

  export type LikecommentAvgOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
  }

  export type LikecommentMaxOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
  }

  export type LikecommentMinOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
  }

  export type LikecommentSumOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    commentId?: SortOrder
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type LikemessageCountOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
  }

  export type LikemessageAvgOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
  }

  export type LikemessageMaxOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
  }

  export type LikemessageMinOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
  }

  export type LikemessageSumOrderByAggregateInput = {
    id?: SortOrder
    likerId?: SortOrder
    messageId?: SortOrder
  }

  export type PostCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PostCreateWithoutOwnerInput, PostUncheckedCreateWithoutOwnerInput> | PostCreateWithoutOwnerInput[] | PostUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOwnerInput | PostCreateOrConnectWithoutOwnerInput[]
    createMany?: PostCreateManyOwnerInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutPageOwnerInput = {
    create?: XOR<PostCreateWithoutPageOwnerInput, PostUncheckedCreateWithoutPageOwnerInput> | PostCreateWithoutPageOwnerInput[] | PostUncheckedCreateWithoutPageOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPageOwnerInput | PostCreateOrConnectWithoutPageOwnerInput[]
    createMany?: PostCreateManyPageOwnerInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CommentCreateWithoutOwnerInput, CommentUncheckedCreateWithoutOwnerInput> | CommentCreateWithoutOwnerInput[] | CommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOwnerInput | CommentCreateOrConnectWithoutOwnerInput[]
    createMany?: CommentCreateManyOwnerInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type RelationshipCreateNestedManyWithoutUser1Input = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type RelationshipCreateNestedManyWithoutUser2Input = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type RelationshipCreateNestedManyWithoutRequestingUserInput = {
    create?: XOR<RelationshipCreateWithoutRequestingUserInput, RelationshipUncheckedCreateWithoutRequestingUserInput> | RelationshipCreateWithoutRequestingUserInput[] | RelationshipUncheckedCreateWithoutRequestingUserInput[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutRequestingUserInput | RelationshipCreateOrConnectWithoutRequestingUserInput[]
    createMany?: RelationshipCreateManyRequestingUserInputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LikepostCreateNestedManyWithoutLikerInput = {
    create?: XOR<LikepostCreateWithoutLikerInput, LikepostUncheckedCreateWithoutLikerInput> | LikepostCreateWithoutLikerInput[] | LikepostUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutLikerInput | LikepostCreateOrConnectWithoutLikerInput[]
    createMany?: LikepostCreateManyLikerInputEnvelope
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
  }

  export type LikecommentCreateNestedManyWithoutLikerInput = {
    create?: XOR<LikecommentCreateWithoutLikerInput, LikecommentUncheckedCreateWithoutLikerInput> | LikecommentCreateWithoutLikerInput[] | LikecommentUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutLikerInput | LikecommentCreateOrConnectWithoutLikerInput[]
    createMany?: LikecommentCreateManyLikerInputEnvelope
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
  }

  export type LikemessageCreateNestedManyWithoutLikerInput = {
    create?: XOR<LikemessageCreateWithoutLikerInput, LikemessageUncheckedCreateWithoutLikerInput> | LikemessageCreateWithoutLikerInput[] | LikemessageUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutLikerInput | LikemessageCreateOrConnectWithoutLikerInput[]
    createMany?: LikemessageCreateManyLikerInputEnvelope
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PostCreateWithoutOwnerInput, PostUncheckedCreateWithoutOwnerInput> | PostCreateWithoutOwnerInput[] | PostUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOwnerInput | PostCreateOrConnectWithoutOwnerInput[]
    createMany?: PostCreateManyOwnerInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutPageOwnerInput = {
    create?: XOR<PostCreateWithoutPageOwnerInput, PostUncheckedCreateWithoutPageOwnerInput> | PostCreateWithoutPageOwnerInput[] | PostUncheckedCreateWithoutPageOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPageOwnerInput | PostCreateOrConnectWithoutPageOwnerInput[]
    createMany?: PostCreateManyPageOwnerInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CommentCreateWithoutOwnerInput, CommentUncheckedCreateWithoutOwnerInput> | CommentCreateWithoutOwnerInput[] | CommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOwnerInput | CommentCreateOrConnectWithoutOwnerInput[]
    createMany?: CommentCreateManyOwnerInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type RelationshipUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type RelationshipUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput = {
    create?: XOR<RelationshipCreateWithoutRequestingUserInput, RelationshipUncheckedCreateWithoutRequestingUserInput> | RelationshipCreateWithoutRequestingUserInput[] | RelationshipUncheckedCreateWithoutRequestingUserInput[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutRequestingUserInput | RelationshipCreateOrConnectWithoutRequestingUserInput[]
    createMany?: RelationshipCreateManyRequestingUserInputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type LikepostUncheckedCreateNestedManyWithoutLikerInput = {
    create?: XOR<LikepostCreateWithoutLikerInput, LikepostUncheckedCreateWithoutLikerInput> | LikepostCreateWithoutLikerInput[] | LikepostUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutLikerInput | LikepostCreateOrConnectWithoutLikerInput[]
    createMany?: LikepostCreateManyLikerInputEnvelope
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
  }

  export type LikecommentUncheckedCreateNestedManyWithoutLikerInput = {
    create?: XOR<LikecommentCreateWithoutLikerInput, LikecommentUncheckedCreateWithoutLikerInput> | LikecommentCreateWithoutLikerInput[] | LikecommentUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutLikerInput | LikecommentCreateOrConnectWithoutLikerInput[]
    createMany?: LikecommentCreateManyLikerInputEnvelope
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
  }

  export type LikemessageUncheckedCreateNestedManyWithoutLikerInput = {
    create?: XOR<LikemessageCreateWithoutLikerInput, LikemessageUncheckedCreateWithoutLikerInput> | LikemessageCreateWithoutLikerInput[] | LikemessageUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutLikerInput | LikemessageCreateOrConnectWithoutLikerInput[]
    createMany?: LikemessageCreateManyLikerInputEnvelope
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PostUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PostCreateWithoutOwnerInput, PostUncheckedCreateWithoutOwnerInput> | PostCreateWithoutOwnerInput[] | PostUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOwnerInput | PostCreateOrConnectWithoutOwnerInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutOwnerInput | PostUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PostCreateManyOwnerInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutOwnerInput | PostUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PostUpdateManyWithWhereWithoutOwnerInput | PostUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUpdateManyWithoutPageOwnerNestedInput = {
    create?: XOR<PostCreateWithoutPageOwnerInput, PostUncheckedCreateWithoutPageOwnerInput> | PostCreateWithoutPageOwnerInput[] | PostUncheckedCreateWithoutPageOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPageOwnerInput | PostCreateOrConnectWithoutPageOwnerInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutPageOwnerInput | PostUpsertWithWhereUniqueWithoutPageOwnerInput[]
    createMany?: PostCreateManyPageOwnerInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutPageOwnerInput | PostUpdateWithWhereUniqueWithoutPageOwnerInput[]
    updateMany?: PostUpdateManyWithWhereWithoutPageOwnerInput | PostUpdateManyWithWhereWithoutPageOwnerInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CommentCreateWithoutOwnerInput, CommentUncheckedCreateWithoutOwnerInput> | CommentCreateWithoutOwnerInput[] | CommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOwnerInput | CommentCreateOrConnectWithoutOwnerInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOwnerInput | CommentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CommentCreateManyOwnerInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOwnerInput | CommentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOwnerInput | CommentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type RelationshipUpdateManyWithoutUser1NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser1Input | RelationshipUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser1Input | RelationshipUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser1Input | RelationshipUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type RelationshipUpdateManyWithoutUser2NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser2Input | RelationshipUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser2Input | RelationshipUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser2Input | RelationshipUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type RelationshipUpdateManyWithoutRequestingUserNestedInput = {
    create?: XOR<RelationshipCreateWithoutRequestingUserInput, RelationshipUncheckedCreateWithoutRequestingUserInput> | RelationshipCreateWithoutRequestingUserInput[] | RelationshipUncheckedCreateWithoutRequestingUserInput[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutRequestingUserInput | RelationshipCreateOrConnectWithoutRequestingUserInput[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutRequestingUserInput | RelationshipUpsertWithWhereUniqueWithoutRequestingUserInput[]
    createMany?: RelationshipCreateManyRequestingUserInputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutRequestingUserInput | RelationshipUpdateWithWhereUniqueWithoutRequestingUserInput[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutRequestingUserInput | RelationshipUpdateManyWithWhereWithoutRequestingUserInput[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LikepostUpdateManyWithoutLikerNestedInput = {
    create?: XOR<LikepostCreateWithoutLikerInput, LikepostUncheckedCreateWithoutLikerInput> | LikepostCreateWithoutLikerInput[] | LikepostUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutLikerInput | LikepostCreateOrConnectWithoutLikerInput[]
    upsert?: LikepostUpsertWithWhereUniqueWithoutLikerInput | LikepostUpsertWithWhereUniqueWithoutLikerInput[]
    createMany?: LikepostCreateManyLikerInputEnvelope
    set?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    disconnect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    delete?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    update?: LikepostUpdateWithWhereUniqueWithoutLikerInput | LikepostUpdateWithWhereUniqueWithoutLikerInput[]
    updateMany?: LikepostUpdateManyWithWhereWithoutLikerInput | LikepostUpdateManyWithWhereWithoutLikerInput[]
    deleteMany?: LikepostScalarWhereInput | LikepostScalarWhereInput[]
  }

  export type LikecommentUpdateManyWithoutLikerNestedInput = {
    create?: XOR<LikecommentCreateWithoutLikerInput, LikecommentUncheckedCreateWithoutLikerInput> | LikecommentCreateWithoutLikerInput[] | LikecommentUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutLikerInput | LikecommentCreateOrConnectWithoutLikerInput[]
    upsert?: LikecommentUpsertWithWhereUniqueWithoutLikerInput | LikecommentUpsertWithWhereUniqueWithoutLikerInput[]
    createMany?: LikecommentCreateManyLikerInputEnvelope
    set?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    disconnect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    delete?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    update?: LikecommentUpdateWithWhereUniqueWithoutLikerInput | LikecommentUpdateWithWhereUniqueWithoutLikerInput[]
    updateMany?: LikecommentUpdateManyWithWhereWithoutLikerInput | LikecommentUpdateManyWithWhereWithoutLikerInput[]
    deleteMany?: LikecommentScalarWhereInput | LikecommentScalarWhereInput[]
  }

  export type LikemessageUpdateManyWithoutLikerNestedInput = {
    create?: XOR<LikemessageCreateWithoutLikerInput, LikemessageUncheckedCreateWithoutLikerInput> | LikemessageCreateWithoutLikerInput[] | LikemessageUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutLikerInput | LikemessageCreateOrConnectWithoutLikerInput[]
    upsert?: LikemessageUpsertWithWhereUniqueWithoutLikerInput | LikemessageUpsertWithWhereUniqueWithoutLikerInput[]
    createMany?: LikemessageCreateManyLikerInputEnvelope
    set?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    disconnect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    delete?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    update?: LikemessageUpdateWithWhereUniqueWithoutLikerInput | LikemessageUpdateWithWhereUniqueWithoutLikerInput[]
    updateMany?: LikemessageUpdateManyWithWhereWithoutLikerInput | LikemessageUpdateManyWithWhereWithoutLikerInput[]
    deleteMany?: LikemessageScalarWhereInput | LikemessageScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PostCreateWithoutOwnerInput, PostUncheckedCreateWithoutOwnerInput> | PostCreateWithoutOwnerInput[] | PostUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOwnerInput | PostCreateOrConnectWithoutOwnerInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutOwnerInput | PostUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PostCreateManyOwnerInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutOwnerInput | PostUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PostUpdateManyWithWhereWithoutOwnerInput | PostUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutPageOwnerNestedInput = {
    create?: XOR<PostCreateWithoutPageOwnerInput, PostUncheckedCreateWithoutPageOwnerInput> | PostCreateWithoutPageOwnerInput[] | PostUncheckedCreateWithoutPageOwnerInput[]
    connectOrCreate?: PostCreateOrConnectWithoutPageOwnerInput | PostCreateOrConnectWithoutPageOwnerInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutPageOwnerInput | PostUpsertWithWhereUniqueWithoutPageOwnerInput[]
    createMany?: PostCreateManyPageOwnerInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutPageOwnerInput | PostUpdateWithWhereUniqueWithoutPageOwnerInput[]
    updateMany?: PostUpdateManyWithWhereWithoutPageOwnerInput | PostUpdateManyWithWhereWithoutPageOwnerInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CommentCreateWithoutOwnerInput, CommentUncheckedCreateWithoutOwnerInput> | CommentCreateWithoutOwnerInput[] | CommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOwnerInput | CommentCreateOrConnectWithoutOwnerInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOwnerInput | CommentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CommentCreateManyOwnerInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOwnerInput | CommentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOwnerInput | CommentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type RelationshipUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser1Input | RelationshipUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser1Input | RelationshipUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser1Input | RelationshipUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type RelationshipUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser2Input | RelationshipUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser2Input | RelationshipUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser2Input | RelationshipUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput = {
    create?: XOR<RelationshipCreateWithoutRequestingUserInput, RelationshipUncheckedCreateWithoutRequestingUserInput> | RelationshipCreateWithoutRequestingUserInput[] | RelationshipUncheckedCreateWithoutRequestingUserInput[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutRequestingUserInput | RelationshipCreateOrConnectWithoutRequestingUserInput[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutRequestingUserInput | RelationshipUpsertWithWhereUniqueWithoutRequestingUserInput[]
    createMany?: RelationshipCreateManyRequestingUserInputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutRequestingUserInput | RelationshipUpdateWithWhereUniqueWithoutRequestingUserInput[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutRequestingUserInput | RelationshipUpdateManyWithWhereWithoutRequestingUserInput[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type LikepostUncheckedUpdateManyWithoutLikerNestedInput = {
    create?: XOR<LikepostCreateWithoutLikerInput, LikepostUncheckedCreateWithoutLikerInput> | LikepostCreateWithoutLikerInput[] | LikepostUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutLikerInput | LikepostCreateOrConnectWithoutLikerInput[]
    upsert?: LikepostUpsertWithWhereUniqueWithoutLikerInput | LikepostUpsertWithWhereUniqueWithoutLikerInput[]
    createMany?: LikepostCreateManyLikerInputEnvelope
    set?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    disconnect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    delete?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    update?: LikepostUpdateWithWhereUniqueWithoutLikerInput | LikepostUpdateWithWhereUniqueWithoutLikerInput[]
    updateMany?: LikepostUpdateManyWithWhereWithoutLikerInput | LikepostUpdateManyWithWhereWithoutLikerInput[]
    deleteMany?: LikepostScalarWhereInput | LikepostScalarWhereInput[]
  }

  export type LikecommentUncheckedUpdateManyWithoutLikerNestedInput = {
    create?: XOR<LikecommentCreateWithoutLikerInput, LikecommentUncheckedCreateWithoutLikerInput> | LikecommentCreateWithoutLikerInput[] | LikecommentUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutLikerInput | LikecommentCreateOrConnectWithoutLikerInput[]
    upsert?: LikecommentUpsertWithWhereUniqueWithoutLikerInput | LikecommentUpsertWithWhereUniqueWithoutLikerInput[]
    createMany?: LikecommentCreateManyLikerInputEnvelope
    set?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    disconnect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    delete?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    update?: LikecommentUpdateWithWhereUniqueWithoutLikerInput | LikecommentUpdateWithWhereUniqueWithoutLikerInput[]
    updateMany?: LikecommentUpdateManyWithWhereWithoutLikerInput | LikecommentUpdateManyWithWhereWithoutLikerInput[]
    deleteMany?: LikecommentScalarWhereInput | LikecommentScalarWhereInput[]
  }

  export type LikemessageUncheckedUpdateManyWithoutLikerNestedInput = {
    create?: XOR<LikemessageCreateWithoutLikerInput, LikemessageUncheckedCreateWithoutLikerInput> | LikemessageCreateWithoutLikerInput[] | LikemessageUncheckedCreateWithoutLikerInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutLikerInput | LikemessageCreateOrConnectWithoutLikerInput[]
    upsert?: LikemessageUpsertWithWhereUniqueWithoutLikerInput | LikemessageUpsertWithWhereUniqueWithoutLikerInput[]
    createMany?: LikemessageCreateManyLikerInputEnvelope
    set?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    disconnect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    delete?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    update?: LikemessageUpdateWithWhereUniqueWithoutLikerInput | LikemessageUpdateWithWhereUniqueWithoutLikerInput[]
    updateMany?: LikemessageUpdateManyWithWhereWithoutLikerInput | LikemessageUpdateManyWithWhereWithoutLikerInput[]
    deleteMany?: LikemessageScalarWhereInput | LikemessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUser1Input = {
    create?: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUser2Input = {
    create?: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser2Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestingUserInput = {
    create?: XOR<UserCreateWithoutRequestingUserInput, UserUncheckedCreateWithoutRequestingUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestingUserInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutUser1NestedInput = {
    create?: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser1Input
    upsert?: UserUpsertWithoutUser1Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser1Input, UserUpdateWithoutUser1Input>, UserUncheckedUpdateWithoutUser1Input>
  }

  export type UserUpdateOneRequiredWithoutUser2NestedInput = {
    create?: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser2Input
    upsert?: UserUpsertWithoutUser2Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser2Input, UserUpdateWithoutUser2Input>, UserUncheckedUpdateWithoutUser2Input>
  }

  export type UserUpdateOneRequiredWithoutRequestingUserNestedInput = {
    create?: XOR<UserCreateWithoutRequestingUserInput, UserUncheckedCreateWithoutRequestingUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestingUserInput
    upsert?: UserUpsertWithoutRequestingUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestingUserInput, UserUpdateWithoutRequestingUserInput>, UserUncheckedUpdateWithoutRequestingUserInput>
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfilePostsInput = {
    create?: XOR<UserCreateWithoutProfilePostsInput, UserUncheckedCreateWithoutProfilePostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePostsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikepostCreateNestedManyWithoutPostInput = {
    create?: XOR<LikepostCreateWithoutPostInput, LikepostUncheckedCreateWithoutPostInput> | LikepostCreateWithoutPostInput[] | LikepostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutPostInput | LikepostCreateOrConnectWithoutPostInput[]
    createMany?: LikepostCreateManyPostInputEnvelope
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikepostUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<LikepostCreateWithoutPostInput, LikepostUncheckedCreateWithoutPostInput> | LikepostCreateWithoutPostInput[] | LikepostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutPostInput | LikepostCreateOrConnectWithoutPostInput[]
    createMany?: LikepostCreateManyPostInputEnvelope
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateOneRequiredWithoutProfilePostsNestedInput = {
    create?: XOR<UserCreateWithoutProfilePostsInput, UserUncheckedCreateWithoutProfilePostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePostsInput
    upsert?: UserUpsertWithoutProfilePostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilePostsInput, UserUpdateWithoutProfilePostsInput>, UserUncheckedUpdateWithoutProfilePostsInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikepostUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikepostCreateWithoutPostInput, LikepostUncheckedCreateWithoutPostInput> | LikepostCreateWithoutPostInput[] | LikepostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutPostInput | LikepostCreateOrConnectWithoutPostInput[]
    upsert?: LikepostUpsertWithWhereUniqueWithoutPostInput | LikepostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikepostCreateManyPostInputEnvelope
    set?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    disconnect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    delete?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    update?: LikepostUpdateWithWhereUniqueWithoutPostInput | LikepostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikepostUpdateManyWithWhereWithoutPostInput | LikepostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikepostScalarWhereInput | LikepostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikepostUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikepostCreateWithoutPostInput, LikepostUncheckedCreateWithoutPostInput> | LikepostCreateWithoutPostInput[] | LikepostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikepostCreateOrConnectWithoutPostInput | LikepostCreateOrConnectWithoutPostInput[]
    upsert?: LikepostUpsertWithWhereUniqueWithoutPostInput | LikepostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikepostCreateManyPostInputEnvelope
    set?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    disconnect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    delete?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    connect?: LikepostWhereUniqueInput | LikepostWhereUniqueInput[]
    update?: LikepostUpdateWithWhereUniqueWithoutPostInput | LikepostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikepostUpdateManyWithWhereWithoutPostInput | LikepostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikepostScalarWhereInput | LikepostScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type LikecommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<LikecommentCreateWithoutCommentInput, LikecommentUncheckedCreateWithoutCommentInput> | LikecommentCreateWithoutCommentInput[] | LikecommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutCommentInput | LikecommentCreateOrConnectWithoutCommentInput[]
    createMany?: LikecommentCreateManyCommentInputEnvelope
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
  }

  export type LikecommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<LikecommentCreateWithoutCommentInput, LikecommentUncheckedCreateWithoutCommentInput> | LikecommentCreateWithoutCommentInput[] | LikecommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutCommentInput | LikecommentCreateOrConnectWithoutCommentInput[]
    createMany?: LikecommentCreateManyCommentInputEnvelope
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type LikecommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<LikecommentCreateWithoutCommentInput, LikecommentUncheckedCreateWithoutCommentInput> | LikecommentCreateWithoutCommentInput[] | LikecommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutCommentInput | LikecommentCreateOrConnectWithoutCommentInput[]
    upsert?: LikecommentUpsertWithWhereUniqueWithoutCommentInput | LikecommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: LikecommentCreateManyCommentInputEnvelope
    set?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    disconnect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    delete?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    update?: LikecommentUpdateWithWhereUniqueWithoutCommentInput | LikecommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: LikecommentUpdateManyWithWhereWithoutCommentInput | LikecommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: LikecommentScalarWhereInput | LikecommentScalarWhereInput[]
  }

  export type LikecommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<LikecommentCreateWithoutCommentInput, LikecommentUncheckedCreateWithoutCommentInput> | LikecommentCreateWithoutCommentInput[] | LikecommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: LikecommentCreateOrConnectWithoutCommentInput | LikecommentCreateOrConnectWithoutCommentInput[]
    upsert?: LikecommentUpsertWithWhereUniqueWithoutCommentInput | LikecommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: LikecommentCreateManyCommentInputEnvelope
    set?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    disconnect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    delete?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    connect?: LikecommentWhereUniqueInput | LikecommentWhereUniqueInput[]
    update?: LikecommentUpdateWithWhereUniqueWithoutCommentInput | LikecommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: LikecommentUpdateManyWithWhereWithoutCommentInput | LikecommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: LikecommentScalarWhereInput | LikecommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSenderInput = {
    create?: XOR<UserCreateWithoutSenderInput, UserUncheckedCreateWithoutSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutSenderInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceiverInput = {
    create?: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiverInput
    connect?: UserWhereUniqueInput
  }

  export type LikemessageCreateNestedManyWithoutMessageInput = {
    create?: XOR<LikemessageCreateWithoutMessageInput, LikemessageUncheckedCreateWithoutMessageInput> | LikemessageCreateWithoutMessageInput[] | LikemessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutMessageInput | LikemessageCreateOrConnectWithoutMessageInput[]
    createMany?: LikemessageCreateManyMessageInputEnvelope
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
  }

  export type LikemessageUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<LikemessageCreateWithoutMessageInput, LikemessageUncheckedCreateWithoutMessageInput> | LikemessageCreateWithoutMessageInput[] | LikemessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutMessageInput | LikemessageCreateOrConnectWithoutMessageInput[]
    createMany?: LikemessageCreateManyMessageInputEnvelope
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSenderNestedInput = {
    create?: XOR<UserCreateWithoutSenderInput, UserUncheckedCreateWithoutSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutSenderInput
    upsert?: UserUpsertWithoutSenderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSenderInput, UserUpdateWithoutSenderInput>, UserUncheckedUpdateWithoutSenderInput>
  }

  export type UserUpdateOneRequiredWithoutReceiverNestedInput = {
    create?: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiverInput
    upsert?: UserUpsertWithoutReceiverInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceiverInput, UserUpdateWithoutReceiverInput>, UserUncheckedUpdateWithoutReceiverInput>
  }

  export type LikemessageUpdateManyWithoutMessageNestedInput = {
    create?: XOR<LikemessageCreateWithoutMessageInput, LikemessageUncheckedCreateWithoutMessageInput> | LikemessageCreateWithoutMessageInput[] | LikemessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutMessageInput | LikemessageCreateOrConnectWithoutMessageInput[]
    upsert?: LikemessageUpsertWithWhereUniqueWithoutMessageInput | LikemessageUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: LikemessageCreateManyMessageInputEnvelope
    set?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    disconnect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    delete?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    update?: LikemessageUpdateWithWhereUniqueWithoutMessageInput | LikemessageUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: LikemessageUpdateManyWithWhereWithoutMessageInput | LikemessageUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: LikemessageScalarWhereInput | LikemessageScalarWhereInput[]
  }

  export type LikemessageUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<LikemessageCreateWithoutMessageInput, LikemessageUncheckedCreateWithoutMessageInput> | LikemessageCreateWithoutMessageInput[] | LikemessageUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: LikemessageCreateOrConnectWithoutMessageInput | LikemessageCreateOrConnectWithoutMessageInput[]
    upsert?: LikemessageUpsertWithWhereUniqueWithoutMessageInput | LikemessageUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: LikemessageCreateManyMessageInputEnvelope
    set?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    disconnect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    delete?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    connect?: LikemessageWhereUniqueInput | LikemessageWhereUniqueInput[]
    update?: LikemessageUpdateWithWhereUniqueWithoutMessageInput | LikemessageUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: LikemessageUpdateManyWithWhereWithoutMessageInput | LikemessageUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: LikemessageScalarWhereInput | LikemessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostLikesInput = {
    create?: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostLikesInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPostLikesNestedInput = {
    create?: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostLikesInput
    upsert?: UserUpsertWithoutPostLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostLikesInput, UserUpdateWithoutPostLikesInput>, UserUncheckedUpdateWithoutPostLikesInput>
  }

  export type PostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    upsert?: PostUpsertWithoutLikesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>, PostUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutCommentLikesInput = {
    create?: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentLikesInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutLikesInput = {
    create?: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikesInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentLikesNestedInput = {
    create?: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentLikesInput
    upsert?: UserUpsertWithoutCommentLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentLikesInput, UserUpdateWithoutCommentLikesInput>, UserUncheckedUpdateWithoutCommentLikesInput>
  }

  export type CommentUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikesInput
    upsert?: CommentUpsertWithoutLikesInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutLikesInput, CommentUpdateWithoutLikesInput>, CommentUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutMessageLikesInput = {
    create?: XOR<UserCreateWithoutMessageLikesInput, UserUncheckedCreateWithoutMessageLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageLikesInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedOneWithoutLikesInput = {
    create?: XOR<MessageCreateWithoutLikesInput, MessageUncheckedCreateWithoutLikesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutLikesInput
    connect?: MessageWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessageLikesNestedInput = {
    create?: XOR<UserCreateWithoutMessageLikesInput, UserUncheckedCreateWithoutMessageLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageLikesInput
    upsert?: UserUpsertWithoutMessageLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessageLikesInput, UserUpdateWithoutMessageLikesInput>, UserUncheckedUpdateWithoutMessageLikesInput>
  }

  export type MessageUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<MessageCreateWithoutLikesInput, MessageUncheckedCreateWithoutLikesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutLikesInput
    upsert?: MessageUpsertWithoutLikesInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutLikesInput, MessageUpdateWithoutLikesInput>, MessageUncheckedUpdateWithoutLikesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PostCreateWithoutOwnerInput = {
    dateCreated?: Date | string
    title: string
    content: string
    pageOwner: UserCreateNestedOneWithoutProfilePostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: LikepostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutOwnerInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    pageOwnerId: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: LikepostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutOwnerInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutOwnerInput, PostUncheckedCreateWithoutOwnerInput>
  }

  export type PostCreateManyOwnerInputEnvelope = {
    data: PostCreateManyOwnerInput | PostCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutPageOwnerInput = {
    dateCreated?: Date | string
    title: string
    content: string
    owner: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: LikepostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPageOwnerInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    ownerId: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: LikepostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPageOwnerInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPageOwnerInput, PostUncheckedCreateWithoutPageOwnerInput>
  }

  export type PostCreateManyPageOwnerInputEnvelope = {
    data: PostCreateManyPageOwnerInput | PostCreateManyPageOwnerInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutOwnerInput = {
    dateCreated?: Date | string
    content: string
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: LikecommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutOwnerInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    postId: number
    likes?: LikecommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutOwnerInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutOwnerInput, CommentUncheckedCreateWithoutOwnerInput>
  }

  export type CommentCreateManyOwnerInputEnvelope = {
    data: CommentCreateManyOwnerInput | CommentCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type RelationshipCreateWithoutUser1Input = {
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
    user2: UserCreateNestedOneWithoutUser2Input
    requestingUser: UserCreateNestedOneWithoutRequestingUserInput
  }

  export type RelationshipUncheckedCreateWithoutUser1Input = {
    id?: number
    user2Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipCreateOrConnectWithoutUser1Input = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input>
  }

  export type RelationshipCreateManyUser1InputEnvelope = {
    data: RelationshipCreateManyUser1Input | RelationshipCreateManyUser1Input[]
    skipDuplicates?: boolean
  }

  export type RelationshipCreateWithoutUser2Input = {
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
    user1: UserCreateNestedOneWithoutUser1Input
    requestingUser: UserCreateNestedOneWithoutRequestingUserInput
  }

  export type RelationshipUncheckedCreateWithoutUser2Input = {
    id?: number
    user1Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipCreateOrConnectWithoutUser2Input = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input>
  }

  export type RelationshipCreateManyUser2InputEnvelope = {
    data: RelationshipCreateManyUser2Input | RelationshipCreateManyUser2Input[]
    skipDuplicates?: boolean
  }

  export type RelationshipCreateWithoutRequestingUserInput = {
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
    user1: UserCreateNestedOneWithoutUser1Input
    user2: UserCreateNestedOneWithoutUser2Input
  }

  export type RelationshipUncheckedCreateWithoutRequestingUserInput = {
    id?: number
    user1Id: number
    user2Id: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipCreateOrConnectWithoutRequestingUserInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutRequestingUserInput, RelationshipUncheckedCreateWithoutRequestingUserInput>
  }

  export type RelationshipCreateManyRequestingUserInputEnvelope = {
    data: RelationshipCreateManyRequestingUserInput | RelationshipCreateManyRequestingUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    dateCreated?: Date | string
    content: string
    receiver: UserCreateNestedOneWithoutReceiverInput
    likes?: LikemessageCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    receiverId: number
    likes?: LikemessageUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverInput = {
    dateCreated?: Date | string
    content: string
    sender: UserCreateNestedOneWithoutSenderInput
    likes?: LikemessageCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReceiverInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    senderId: number
    likes?: LikemessageUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateManyReceiverInputEnvelope = {
    data: MessageCreateManyReceiverInput | MessageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type LikepostCreateWithoutLikerInput = {
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type LikepostUncheckedCreateWithoutLikerInput = {
    id?: number
    postId: number
  }

  export type LikepostCreateOrConnectWithoutLikerInput = {
    where: LikepostWhereUniqueInput
    create: XOR<LikepostCreateWithoutLikerInput, LikepostUncheckedCreateWithoutLikerInput>
  }

  export type LikepostCreateManyLikerInputEnvelope = {
    data: LikepostCreateManyLikerInput | LikepostCreateManyLikerInput[]
    skipDuplicates?: boolean
  }

  export type LikecommentCreateWithoutLikerInput = {
    comment: CommentCreateNestedOneWithoutLikesInput
  }

  export type LikecommentUncheckedCreateWithoutLikerInput = {
    id?: number
    commentId: number
  }

  export type LikecommentCreateOrConnectWithoutLikerInput = {
    where: LikecommentWhereUniqueInput
    create: XOR<LikecommentCreateWithoutLikerInput, LikecommentUncheckedCreateWithoutLikerInput>
  }

  export type LikecommentCreateManyLikerInputEnvelope = {
    data: LikecommentCreateManyLikerInput | LikecommentCreateManyLikerInput[]
    skipDuplicates?: boolean
  }

  export type LikemessageCreateWithoutLikerInput = {
    message: MessageCreateNestedOneWithoutLikesInput
  }

  export type LikemessageUncheckedCreateWithoutLikerInput = {
    id?: number
    messageId: number
  }

  export type LikemessageCreateOrConnectWithoutLikerInput = {
    where: LikemessageWhereUniqueInput
    create: XOR<LikemessageCreateWithoutLikerInput, LikemessageUncheckedCreateWithoutLikerInput>
  }

  export type LikemessageCreateManyLikerInputEnvelope = {
    data: LikemessageCreateManyLikerInput | LikemessageCreateManyLikerInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutOwnerInput, PostUncheckedUpdateWithoutOwnerInput>
    create: XOR<PostCreateWithoutOwnerInput, PostUncheckedCreateWithoutOwnerInput>
  }

  export type PostUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutOwnerInput, PostUncheckedUpdateWithoutOwnerInput>
  }

  export type PostUpdateManyWithWhereWithoutOwnerInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutOwnerInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    dateCreated?: DateTimeFilter<"Post"> | Date | string
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    ownerId?: IntFilter<"Post"> | number
    pageOwnerId?: IntFilter<"Post"> | number
  }

  export type PostUpsertWithWhereUniqueWithoutPageOwnerInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutPageOwnerInput, PostUncheckedUpdateWithoutPageOwnerInput>
    create: XOR<PostCreateWithoutPageOwnerInput, PostUncheckedCreateWithoutPageOwnerInput>
  }

  export type PostUpdateWithWhereUniqueWithoutPageOwnerInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutPageOwnerInput, PostUncheckedUpdateWithoutPageOwnerInput>
  }

  export type PostUpdateManyWithWhereWithoutPageOwnerInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPageOwnerInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutOwnerInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutOwnerInput, CommentUncheckedUpdateWithoutOwnerInput>
    create: XOR<CommentCreateWithoutOwnerInput, CommentUncheckedCreateWithoutOwnerInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutOwnerInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutOwnerInput, CommentUncheckedUpdateWithoutOwnerInput>
  }

  export type CommentUpdateManyWithWhereWithoutOwnerInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutOwnerInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    dateCreated?: DateTimeFilter<"Comment"> | Date | string
    content?: StringFilter<"Comment"> | string
    postId?: IntFilter<"Comment"> | number
    ownerId?: IntFilter<"Comment"> | number
  }

  export type RelationshipUpsertWithWhereUniqueWithoutUser1Input = {
    where: RelationshipWhereUniqueInput
    update: XOR<RelationshipUpdateWithoutUser1Input, RelationshipUncheckedUpdateWithoutUser1Input>
    create: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input>
  }

  export type RelationshipUpdateWithWhereUniqueWithoutUser1Input = {
    where: RelationshipWhereUniqueInput
    data: XOR<RelationshipUpdateWithoutUser1Input, RelationshipUncheckedUpdateWithoutUser1Input>
  }

  export type RelationshipUpdateManyWithWhereWithoutUser1Input = {
    where: RelationshipScalarWhereInput
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyWithoutUser1Input>
  }

  export type RelationshipScalarWhereInput = {
    AND?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
    OR?: RelationshipScalarWhereInput[]
    NOT?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
    id?: IntFilter<"Relationship"> | number
    user1Id?: IntFilter<"Relationship"> | number
    user2Id?: IntFilter<"Relationship"> | number
    requestingUserId?: IntFilter<"Relationship"> | number
    pending?: BoolFilter<"Relationship"> | boolean
    accepted?: BoolFilter<"Relationship"> | boolean
    blockeduser1?: BoolNullableFilter<"Relationship"> | boolean | null
    blockeduser2?: BoolNullableFilter<"Relationship"> | boolean | null
  }

  export type RelationshipUpsertWithWhereUniqueWithoutUser2Input = {
    where: RelationshipWhereUniqueInput
    update: XOR<RelationshipUpdateWithoutUser2Input, RelationshipUncheckedUpdateWithoutUser2Input>
    create: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input>
  }

  export type RelationshipUpdateWithWhereUniqueWithoutUser2Input = {
    where: RelationshipWhereUniqueInput
    data: XOR<RelationshipUpdateWithoutUser2Input, RelationshipUncheckedUpdateWithoutUser2Input>
  }

  export type RelationshipUpdateManyWithWhereWithoutUser2Input = {
    where: RelationshipScalarWhereInput
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyWithoutUser2Input>
  }

  export type RelationshipUpsertWithWhereUniqueWithoutRequestingUserInput = {
    where: RelationshipWhereUniqueInput
    update: XOR<RelationshipUpdateWithoutRequestingUserInput, RelationshipUncheckedUpdateWithoutRequestingUserInput>
    create: XOR<RelationshipCreateWithoutRequestingUserInput, RelationshipUncheckedCreateWithoutRequestingUserInput>
  }

  export type RelationshipUpdateWithWhereUniqueWithoutRequestingUserInput = {
    where: RelationshipWhereUniqueInput
    data: XOR<RelationshipUpdateWithoutRequestingUserInput, RelationshipUncheckedUpdateWithoutRequestingUserInput>
  }

  export type RelationshipUpdateManyWithWhereWithoutRequestingUserInput = {
    where: RelationshipScalarWhereInput
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyWithoutRequestingUserInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    dateCreated?: DateTimeFilter<"Message"> | Date | string
    content?: StringFilter<"Message"> | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type LikepostUpsertWithWhereUniqueWithoutLikerInput = {
    where: LikepostWhereUniqueInput
    update: XOR<LikepostUpdateWithoutLikerInput, LikepostUncheckedUpdateWithoutLikerInput>
    create: XOR<LikepostCreateWithoutLikerInput, LikepostUncheckedCreateWithoutLikerInput>
  }

  export type LikepostUpdateWithWhereUniqueWithoutLikerInput = {
    where: LikepostWhereUniqueInput
    data: XOR<LikepostUpdateWithoutLikerInput, LikepostUncheckedUpdateWithoutLikerInput>
  }

  export type LikepostUpdateManyWithWhereWithoutLikerInput = {
    where: LikepostScalarWhereInput
    data: XOR<LikepostUpdateManyMutationInput, LikepostUncheckedUpdateManyWithoutLikerInput>
  }

  export type LikepostScalarWhereInput = {
    AND?: LikepostScalarWhereInput | LikepostScalarWhereInput[]
    OR?: LikepostScalarWhereInput[]
    NOT?: LikepostScalarWhereInput | LikepostScalarWhereInput[]
    id?: IntFilter<"Likepost"> | number
    likerId?: IntFilter<"Likepost"> | number
    postId?: IntFilter<"Likepost"> | number
  }

  export type LikecommentUpsertWithWhereUniqueWithoutLikerInput = {
    where: LikecommentWhereUniqueInput
    update: XOR<LikecommentUpdateWithoutLikerInput, LikecommentUncheckedUpdateWithoutLikerInput>
    create: XOR<LikecommentCreateWithoutLikerInput, LikecommentUncheckedCreateWithoutLikerInput>
  }

  export type LikecommentUpdateWithWhereUniqueWithoutLikerInput = {
    where: LikecommentWhereUniqueInput
    data: XOR<LikecommentUpdateWithoutLikerInput, LikecommentUncheckedUpdateWithoutLikerInput>
  }

  export type LikecommentUpdateManyWithWhereWithoutLikerInput = {
    where: LikecommentScalarWhereInput
    data: XOR<LikecommentUpdateManyMutationInput, LikecommentUncheckedUpdateManyWithoutLikerInput>
  }

  export type LikecommentScalarWhereInput = {
    AND?: LikecommentScalarWhereInput | LikecommentScalarWhereInput[]
    OR?: LikecommentScalarWhereInput[]
    NOT?: LikecommentScalarWhereInput | LikecommentScalarWhereInput[]
    id?: IntFilter<"Likecomment"> | number
    likerId?: IntFilter<"Likecomment"> | number
    commentId?: IntFilter<"Likecomment"> | number
  }

  export type LikemessageUpsertWithWhereUniqueWithoutLikerInput = {
    where: LikemessageWhereUniqueInput
    update: XOR<LikemessageUpdateWithoutLikerInput, LikemessageUncheckedUpdateWithoutLikerInput>
    create: XOR<LikemessageCreateWithoutLikerInput, LikemessageUncheckedCreateWithoutLikerInput>
  }

  export type LikemessageUpdateWithWhereUniqueWithoutLikerInput = {
    where: LikemessageWhereUniqueInput
    data: XOR<LikemessageUpdateWithoutLikerInput, LikemessageUncheckedUpdateWithoutLikerInput>
  }

  export type LikemessageUpdateManyWithWhereWithoutLikerInput = {
    where: LikemessageScalarWhereInput
    data: XOR<LikemessageUpdateManyMutationInput, LikemessageUncheckedUpdateManyWithoutLikerInput>
  }

  export type LikemessageScalarWhereInput = {
    AND?: LikemessageScalarWhereInput | LikemessageScalarWhereInput[]
    OR?: LikemessageScalarWhereInput[]
    NOT?: LikemessageScalarWhereInput | LikemessageScalarWhereInput[]
    id?: IntFilter<"Likemessage"> | number
    likerId?: IntFilter<"Likemessage"> | number
    messageId?: IntFilter<"Likemessage"> | number
  }

  export type UserCreateWithoutUser1Input = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutUser1Input = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutUser1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
  }

  export type UserCreateWithoutUser2Input = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutUser2Input = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutUser2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
  }

  export type UserCreateWithoutRequestingUserInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutRequestingUserInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutRequestingUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestingUserInput, UserUncheckedCreateWithoutRequestingUserInput>
  }

  export type UserUpsertWithoutUser1Input = {
    update: XOR<UserUpdateWithoutUser1Input, UserUncheckedUpdateWithoutUser1Input>
    create: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser1Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser1Input, UserUncheckedUpdateWithoutUser1Input>
  }

  export type UserUpdateWithoutUser1Input = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type UserUpsertWithoutUser2Input = {
    update: XOR<UserUpdateWithoutUser2Input, UserUncheckedUpdateWithoutUser2Input>
    create: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser2Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser2Input, UserUncheckedUpdateWithoutUser2Input>
  }

  export type UserUpdateWithoutUser2Input = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type UserUpsertWithoutRequestingUserInput = {
    update: XOR<UserUpdateWithoutRequestingUserInput, UserUncheckedUpdateWithoutRequestingUserInput>
    create: XOR<UserCreateWithoutRequestingUserInput, UserUncheckedCreateWithoutRequestingUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestingUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestingUserInput, UserUncheckedUpdateWithoutRequestingUserInput>
  }

  export type UserUpdateWithoutRequestingUserInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestingUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type UserCreateWithoutPostsInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserCreateWithoutProfilePostsInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutProfilePostsInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutProfilePostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilePostsInput, UserUncheckedCreateWithoutProfilePostsInput>
  }

  export type CommentCreateWithoutPostInput = {
    dateCreated?: Date | string
    content: string
    owner: UserCreateNestedOneWithoutCommentsInput
    likes?: LikecommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    ownerId: number
    likes?: LikecommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: CommentCreateManyPostInput | CommentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type LikepostCreateWithoutPostInput = {
    liker: UserCreateNestedOneWithoutPostLikesInput
  }

  export type LikepostUncheckedCreateWithoutPostInput = {
    id?: number
    likerId: number
  }

  export type LikepostCreateOrConnectWithoutPostInput = {
    where: LikepostWhereUniqueInput
    create: XOR<LikepostCreateWithoutPostInput, LikepostUncheckedCreateWithoutPostInput>
  }

  export type LikepostCreateManyPostInputEnvelope = {
    data: LikepostCreateManyPostInput | LikepostCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type UserUpsertWithoutProfilePostsInput = {
    update: XOR<UserUpdateWithoutProfilePostsInput, UserUncheckedUpdateWithoutProfilePostsInput>
    create: XOR<UserCreateWithoutProfilePostsInput, UserUncheckedCreateWithoutProfilePostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilePostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilePostsInput, UserUncheckedUpdateWithoutProfilePostsInput>
  }

  export type UserUpdateWithoutProfilePostsInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>
  }

  export type LikepostUpsertWithWhereUniqueWithoutPostInput = {
    where: LikepostWhereUniqueInput
    update: XOR<LikepostUpdateWithoutPostInput, LikepostUncheckedUpdateWithoutPostInput>
    create: XOR<LikepostCreateWithoutPostInput, LikepostUncheckedCreateWithoutPostInput>
  }

  export type LikepostUpdateWithWhereUniqueWithoutPostInput = {
    where: LikepostWhereUniqueInput
    data: XOR<LikepostUpdateWithoutPostInput, LikepostUncheckedUpdateWithoutPostInput>
  }

  export type LikepostUpdateManyWithWhereWithoutPostInput = {
    where: LikepostScalarWhereInput
    data: XOR<LikepostUpdateManyMutationInput, LikepostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostCreateWithoutCommentsInput = {
    dateCreated?: Date | string
    title: string
    content: string
    owner: UserCreateNestedOneWithoutPostsInput
    pageOwner: UserCreateNestedOneWithoutProfilePostsInput
    likes?: LikepostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    ownerId: number
    pageOwnerId: number
    likes?: LikepostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type LikecommentCreateWithoutCommentInput = {
    liker: UserCreateNestedOneWithoutCommentLikesInput
  }

  export type LikecommentUncheckedCreateWithoutCommentInput = {
    id?: number
    likerId: number
  }

  export type LikecommentCreateOrConnectWithoutCommentInput = {
    where: LikecommentWhereUniqueInput
    create: XOR<LikecommentCreateWithoutCommentInput, LikecommentUncheckedCreateWithoutCommentInput>
  }

  export type LikecommentCreateManyCommentInputEnvelope = {
    data: LikecommentCreateManyCommentInput | LikecommentCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutPostsNestedInput
    pageOwner?: UserUpdateOneRequiredWithoutProfilePostsNestedInput
    likes?: LikepostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    pageOwnerId?: IntFieldUpdateOperationsInput | number
    likes?: LikepostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type LikecommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: LikecommentWhereUniqueInput
    update: XOR<LikecommentUpdateWithoutCommentInput, LikecommentUncheckedUpdateWithoutCommentInput>
    create: XOR<LikecommentCreateWithoutCommentInput, LikecommentUncheckedCreateWithoutCommentInput>
  }

  export type LikecommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: LikecommentWhereUniqueInput
    data: XOR<LikecommentUpdateWithoutCommentInput, LikecommentUncheckedUpdateWithoutCommentInput>
  }

  export type LikecommentUpdateManyWithWhereWithoutCommentInput = {
    where: LikecommentScalarWhereInput
    data: XOR<LikecommentUpdateManyMutationInput, LikecommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserCreateWithoutSenderInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutSenderInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutSenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSenderInput, UserUncheckedCreateWithoutSenderInput>
  }

  export type UserCreateWithoutReceiverInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutReceiverInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutReceiverInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
  }

  export type LikemessageCreateWithoutMessageInput = {
    liker: UserCreateNestedOneWithoutMessageLikesInput
  }

  export type LikemessageUncheckedCreateWithoutMessageInput = {
    id?: number
    likerId: number
  }

  export type LikemessageCreateOrConnectWithoutMessageInput = {
    where: LikemessageWhereUniqueInput
    create: XOR<LikemessageCreateWithoutMessageInput, LikemessageUncheckedCreateWithoutMessageInput>
  }

  export type LikemessageCreateManyMessageInputEnvelope = {
    data: LikemessageCreateManyMessageInput | LikemessageCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSenderInput = {
    update: XOR<UserUpdateWithoutSenderInput, UserUncheckedUpdateWithoutSenderInput>
    create: XOR<UserCreateWithoutSenderInput, UserUncheckedCreateWithoutSenderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSenderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSenderInput, UserUncheckedUpdateWithoutSenderInput>
  }

  export type UserUpdateWithoutSenderInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type UserUpsertWithoutReceiverInput = {
    update: XOR<UserUpdateWithoutReceiverInput, UserUncheckedUpdateWithoutReceiverInput>
    create: XOR<UserCreateWithoutReceiverInput, UserUncheckedCreateWithoutReceiverInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceiverInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceiverInput, UserUncheckedUpdateWithoutReceiverInput>
  }

  export type UserUpdateWithoutReceiverInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type LikemessageUpsertWithWhereUniqueWithoutMessageInput = {
    where: LikemessageWhereUniqueInput
    update: XOR<LikemessageUpdateWithoutMessageInput, LikemessageUncheckedUpdateWithoutMessageInput>
    create: XOR<LikemessageCreateWithoutMessageInput, LikemessageUncheckedCreateWithoutMessageInput>
  }

  export type LikemessageUpdateWithWhereUniqueWithoutMessageInput = {
    where: LikemessageWhereUniqueInput
    data: XOR<LikemessageUpdateWithoutMessageInput, LikemessageUncheckedUpdateWithoutMessageInput>
  }

  export type LikemessageUpdateManyWithWhereWithoutMessageInput = {
    where: LikemessageScalarWhereInput
    data: XOR<LikemessageUpdateManyMutationInput, LikemessageUncheckedUpdateManyWithoutMessageInput>
  }

  export type UserCreateWithoutPostLikesInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutPostLikesInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutPostLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
  }

  export type PostCreateWithoutLikesInput = {
    dateCreated?: Date | string
    title: string
    content: string
    owner: UserCreateNestedOneWithoutPostsInput
    pageOwner: UserCreateNestedOneWithoutProfilePostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    ownerId: number
    pageOwnerId: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutPostLikesInput = {
    update: XOR<UserUpdateWithoutPostLikesInput, UserUncheckedUpdateWithoutPostLikesInput>
    create: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostLikesInput, UserUncheckedUpdateWithoutPostLikesInput>
  }

  export type UserUpdateWithoutPostLikesInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutPostLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostUpdateWithoutLikesInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutPostsNestedInput
    pageOwner?: UserUpdateOneRequiredWithoutProfilePostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    pageOwnerId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutCommentLikesInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutCommentLikesInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    messageLikes?: LikemessageUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutCommentLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
  }

  export type CommentCreateWithoutLikesInput = {
    dateCreated?: Date | string
    content: string
    post: PostCreateNestedOneWithoutCommentsInput
    owner: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutLikesInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    postId: number
    ownerId: number
  }

  export type CommentCreateOrConnectWithoutLikesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutCommentLikesInput = {
    update: XOR<UserUpdateWithoutCommentLikesInput, UserUncheckedUpdateWithoutCommentLikesInput>
    create: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentLikesInput, UserUncheckedUpdateWithoutCommentLikesInput>
  }

  export type UserUpdateWithoutCommentLikesInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    messageLikes?: LikemessageUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type CommentUpsertWithoutLikesInput = {
    update: XOR<CommentUpdateWithoutLikesInput, CommentUncheckedUpdateWithoutLikesInput>
    create: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutLikesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutLikesInput, CommentUncheckedUpdateWithoutLikesInput>
  }

  export type CommentUpdateWithoutLikesInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    owner?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutMessageLikesInput = {
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostCreateNestedManyWithoutOwnerInput
    profilePosts?: PostCreateNestedManyWithoutPageOwnerInput
    comments?: CommentCreateNestedManyWithoutOwnerInput
    user1?: RelationshipCreateNestedManyWithoutUser1Input
    user2?: RelationshipCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipCreateNestedManyWithoutRequestingUserInput
    sender?: MessageCreateNestedManyWithoutSenderInput
    receiver?: MessageCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentCreateNestedManyWithoutLikerInput
  }

  export type UserUncheckedCreateWithoutMessageLikesInput = {
    id?: number
    dateCreated?: Date | string
    username: string
    email: string
    password: string
    profileInfo?: string
    posts?: PostUncheckedCreateNestedManyWithoutOwnerInput
    profilePosts?: PostUncheckedCreateNestedManyWithoutPageOwnerInput
    comments?: CommentUncheckedCreateNestedManyWithoutOwnerInput
    user1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    user2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
    requestingUser?: RelationshipUncheckedCreateNestedManyWithoutRequestingUserInput
    sender?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receiver?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    postLikes?: LikepostUncheckedCreateNestedManyWithoutLikerInput
    commentLikes?: LikecommentUncheckedCreateNestedManyWithoutLikerInput
  }

  export type UserCreateOrConnectWithoutMessageLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageLikesInput, UserUncheckedCreateWithoutMessageLikesInput>
  }

  export type MessageCreateWithoutLikesInput = {
    dateCreated?: Date | string
    content: string
    sender: UserCreateNestedOneWithoutSenderInput
    receiver: UserCreateNestedOneWithoutReceiverInput
  }

  export type MessageUncheckedCreateWithoutLikesInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    senderId: number
    receiverId: number
  }

  export type MessageCreateOrConnectWithoutLikesInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutLikesInput, MessageUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutMessageLikesInput = {
    update: XOR<UserUpdateWithoutMessageLikesInput, UserUncheckedUpdateWithoutMessageLikesInput>
    create: XOR<UserCreateWithoutMessageLikesInput, UserUncheckedCreateWithoutMessageLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessageLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessageLikesInput, UserUncheckedUpdateWithoutMessageLikesInput>
  }

  export type UserUpdateWithoutMessageLikesInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUpdateManyWithoutSenderNestedInput
    receiver?: MessageUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUpdateManyWithoutLikerNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileInfo?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOwnerNestedInput
    profilePosts?: PostUncheckedUpdateManyWithoutPageOwnerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutOwnerNestedInput
    user1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    user2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
    requestingUser?: RelationshipUncheckedUpdateManyWithoutRequestingUserNestedInput
    sender?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receiver?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    postLikes?: LikepostUncheckedUpdateManyWithoutLikerNestedInput
    commentLikes?: LikecommentUncheckedUpdateManyWithoutLikerNestedInput
  }

  export type MessageUpsertWithoutLikesInput = {
    update: XOR<MessageUpdateWithoutLikesInput, MessageUncheckedUpdateWithoutLikesInput>
    create: XOR<MessageCreateWithoutLikesInput, MessageUncheckedCreateWithoutLikesInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutLikesInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutLikesInput, MessageUncheckedUpdateWithoutLikesInput>
  }

  export type MessageUpdateWithoutLikesInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    sender?: UserUpdateOneRequiredWithoutSenderNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceiverNestedInput
  }

  export type MessageUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyOwnerInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    pageOwnerId: number
  }

  export type PostCreateManyPageOwnerInput = {
    id?: number
    dateCreated?: Date | string
    title: string
    content: string
    ownerId: number
  }

  export type CommentCreateManyOwnerInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    postId: number
  }

  export type RelationshipCreateManyUser1Input = {
    id?: number
    user2Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipCreateManyUser2Input = {
    id?: number
    user1Id: number
    requestingUserId: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type RelationshipCreateManyRequestingUserInput = {
    id?: number
    user1Id: number
    user2Id: number
    pending: boolean
    accepted: boolean
    blockeduser1?: boolean | null
    blockeduser2?: boolean | null
  }

  export type MessageCreateManySenderInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    receiverId: number
  }

  export type MessageCreateManyReceiverInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    senderId: number
  }

  export type LikepostCreateManyLikerInput = {
    id?: number
    postId: number
  }

  export type LikecommentCreateManyLikerInput = {
    id?: number
    commentId: number
  }

  export type LikemessageCreateManyLikerInput = {
    id?: number
    messageId: number
  }

  export type PostUpdateWithoutOwnerInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    pageOwner?: UserUpdateOneRequiredWithoutProfilePostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: LikepostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    pageOwnerId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: LikepostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    pageOwnerId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutPageOwnerInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: LikepostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPageOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: LikepostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutPageOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutOwnerInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: LikecommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    likes?: LikecommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type RelationshipUpdateWithoutUser1Input = {
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user2?: UserUpdateOneRequiredWithoutUser2NestedInput
    requestingUser?: UserUpdateOneRequiredWithoutRequestingUserNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    requestingUserId?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipUncheckedUpdateManyWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    requestingUserId?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipUpdateWithoutUser2Input = {
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user1?: UserUpdateOneRequiredWithoutUser1NestedInput
    requestingUser?: UserUpdateOneRequiredWithoutRequestingUserNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    requestingUserId?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipUncheckedUpdateManyWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    requestingUserId?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipUpdateWithoutRequestingUserInput = {
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user1?: UserUpdateOneRequiredWithoutUser1NestedInput
    user2?: UserUpdateOneRequiredWithoutUser2NestedInput
  }

  export type RelationshipUncheckedUpdateWithoutRequestingUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RelationshipUncheckedUpdateManyWithoutRequestingUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    pending?: BoolFieldUpdateOperationsInput | boolean
    accepted?: BoolFieldUpdateOperationsInput | boolean
    blockeduser1?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blockeduser2?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MessageUpdateWithoutSenderInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    receiver?: UserUpdateOneRequiredWithoutReceiverNestedInput
    likes?: LikemessageUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    likes?: LikemessageUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutReceiverInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    sender?: UserUpdateOneRequiredWithoutSenderNestedInput
    likes?: LikemessageUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    likes?: LikemessageUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
  }

  export type LikepostUpdateWithoutLikerInput = {
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikepostUncheckedUpdateWithoutLikerInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type LikepostUncheckedUpdateManyWithoutLikerInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type LikecommentUpdateWithoutLikerInput = {
    comment?: CommentUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikecommentUncheckedUpdateWithoutLikerInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type LikecommentUncheckedUpdateManyWithoutLikerInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type LikemessageUpdateWithoutLikerInput = {
    message?: MessageUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikemessageUncheckedUpdateWithoutLikerInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
  }

  export type LikemessageUncheckedUpdateManyWithoutLikerInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyPostInput = {
    id?: number
    dateCreated?: Date | string
    content: string
    ownerId: number
  }

  export type LikepostCreateManyPostInput = {
    id?: number
    likerId: number
  }

  export type CommentUpdateWithoutPostInput = {
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutCommentsNestedInput
    likes?: LikecommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    likes?: LikecommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type LikepostUpdateWithoutPostInput = {
    liker?: UserUpdateOneRequiredWithoutPostLikesNestedInput
  }

  export type LikepostUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
  }

  export type LikepostUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
  }

  export type LikecommentCreateManyCommentInput = {
    id?: number
    likerId: number
  }

  export type LikecommentUpdateWithoutCommentInput = {
    liker?: UserUpdateOneRequiredWithoutCommentLikesNestedInput
  }

  export type LikecommentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
  }

  export type LikecommentUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
  }

  export type LikemessageCreateManyMessageInput = {
    id?: number
    likerId: number
  }

  export type LikemessageUpdateWithoutMessageInput = {
    liker?: UserUpdateOneRequiredWithoutMessageLikesNestedInput
  }

  export type LikemessageUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
  }

  export type LikemessageUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    likerId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostCountOutputTypeDefaultArgs instead
     */
    export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RelationshipDefaultArgs instead
     */
    export type RelationshipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RelationshipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikepostDefaultArgs instead
     */
    export type LikepostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikepostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikecommentDefaultArgs instead
     */
    export type LikecommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikecommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikemessageDefaultArgs instead
     */
    export type LikemessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikemessageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}